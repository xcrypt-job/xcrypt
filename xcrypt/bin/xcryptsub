#!/usr/bin/env perl
package xcrypt;

use strict;
use File::Copy;
use File::Spec;
use File::Basename;
use Getopt::Long;

#my $opt_dry = 0;
#my $opt_sge = 0;
#GetOptions('sge' => \$opt_sge, 'dry' => \$opt_dry);

if (File::Spec->catfile(basename($ARGV[0])) !~ /xcr/) {
    die "A first argument should be an Xcrypt script.\n";
}

my $savefile = "$ARGV[0]" . '.pl';

if ( $ENV{XCRYPT} ) {
#    if ($ENV{PATH} eq '') { $ENV{PATH} = $ENV{XCRYPT}; }
#    else { $ENV{PATH} = $ENV{XCRYPT} . ':' . $ENV{PATH}; }

    if ($ENV{PERL5LIB} eq '') { $ENV{PERL5LIB} = File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib') . ":" . File::Spec->catfile($ENV{XCRYPT}, 'lib'); }
    else { $ENV{PERL5LIB} = File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib') . ":" . File::Spec->catfile($ENV{XCRYPT}, 'lib') . ":" . $ENV{PERL5LIB}; }
} else {
    die "Set the environment varialble XCRYPT\n";
}

if ( -e $savefile ) { unlink $savefile; }

open ( USER , "< $ARGV[0]") or die "Can't open $ARGV[0]\n";
open ( TMP , "> $savefile") or die "Can't open $savefile\n";
print TMP 'package user;' . "\n";
print TMP 'use xcropt;' . "\n";
print TMP 'use UI;' . "\n";
print TMP 'use threads;' . "\n";
print TMP 'use threads::shared;' . "\n";
print TMP 'use Thread::Semaphore;' . "\n";
print TMP 'use jobsched;' . "\n";
#print TMP 'use base qw(core);' . "\n";
print TMP 'our $smph : shared;' . "\n";
print TMP 'our $max = 255;' . "\n";
print TMP 'our $maxrange = 16;' . "\n";
print TMP 'our $separator_nocheck = \'0\';' . "\n";
print TMP 'our $separator = \'_\';' . "\n";
print TMP '&jobsched::invoke_watch();' . "\n";
print TMP '&jobsched::invoke_abort_check();' . "\n";
foreach (<USER>) { print TMP "$_"; }
print TMP '$jobsched::watch_thread->detach;' . "\n";
print TMP '$jobsched::abort_check_thread->detach;' . "\n";
print TMP 'sub start {my $self = shift;$self->before();$self->SUPER::start();}' . "\n";
print TMP 'sub before {my $self = shift;eval($self->{before});$self->SUPER::before();}' . "\n";
print TMP 'sub after {my $self = shift;$self->SUPER::after();eval($self->{after});}' . "\n";

#print TMP 'return 0;' . "\n";
close ( TMP );
close ( USER );

chmod 0755, $savefile or die "Can't chmod $savefile\n";
#my $dir = File::Spec->catfile(dirname($savefile));
#my $file = File::Spec->catfile(basename($savefile));
#my $exitcode = system("cd $dir; perl $file");
shift @ARGV;
my $exitcode = system("perl $savefile " . join(' ', @ARGV));
unless ($exitcode == 0) { die "Can't perl $savefile\n"; }
