#!/usr/bin/perl
package xcryptstat;

use strict;
use Cwd;
use File::Basename;
use File::Spec;
#use jobsched;

if ( $ENV{XCRYPT} ) {
    if ($ENV{PERL5LIB} eq '') { $ENV{PERL5LIB} = File::Spec->catfile($ENV{XCRYPT}, 'lib'); }
    else { $ENV{PERL5LIB} = File::Spec->catfile($ENV{XCRYPT}, 'lib') . ":" . $ENV{PERL5LIB}; }
} else {
    die "Set the environment varialble XCRYPT\n";
}

my $sge;
if ( $ENV{XCRJOBSCHED} eq 'NQS' ) {
    $sge = 0;
} elsif ( $ENV{XCRJOBSCHED} eq 'SGE' ) {
    $sge = 1;
} else {
    die "Set the environment varialble XCRJOBSCHED (NQS or SGE)\n";
}

sub extract_req_id_from_qstat_line {
    my ($line) = @_;
    ## depend on outputs of NQS's qstat
    ## SGEでも動くようにしたつもり
    # print STDERR $_ . "\n";
    if ($sge) {
        # print "--- $_\n";
        if ($line =~ /^\s*([0-9]+)/) {
            return $1;
        } else {
            return 0;
        }
    } else {
        # print "=== $_\n";
        if ( $line =~ /([0-9]+\.nqs)/ ) {
            return $1;
        } else {
            return 0;
        }
    }
}

my $qstat_command="qstat";
my $current_directory=Cwd::getcwd();
my $inventory_path=File::Spec->catfile($current_directory, 'inv_watch');
my $idfiles = File::Spec->catfile($inventory_path, '.request_ids');
open (QSTATO, "$qstat_command |");
open (REQIDS, "< $idfiles");
my $line = <REQIDS>;
my @array = split(/ /, $line);
my %hash = @array;
close (REQIDS);
while (<QSTATO>) {
    chomp;
    my $req_id = &extract_req_id_from_qstat_line($_);
    if ($req_id) {
	print "$hash{$req_id} is waiting or running.\n";
    }
}
#print "--- 8< --- 8< --- 8< ---\n";
close (QSTATO);
