#!/usr/bin/perl

use Tk;

my ($eof0, $eof2);

my $mw = MainWindow->new( -title => 'Xcryptgui' );
$mw->geometry( '600x600' );

my $br0 = '';
my $ll0 = $mw->Label( -textvariable => \$br0 );
my $bn0 = $mw->Button( -text => 'xcrypt', -command => \&fun0 );
$bn0->place( -relx => '0.0', -relwidth  => '0.2',
	     -rely => '0.00', -relheight => '0.04' );
$ll0->place( -relx => '0.20', -relwidth  => '0.80',
	     -rely => '0.00', -relheight => '0.04' );

my $bn1 = $mw->Button( -text => 'xcryptstat', -command => \&fun1 );
$bn1->place( -relx => '0.00', -relwidth  => '0.20',
	     -rely => '0.04', -relheight => '0.04' );

my $bn2 = $mw->Button( -text => 'xcryptdel', -command => \&fun2 );
$bn2->place( -relx => '0.00', -relwidth  => '0.20',
	     -rely => '0.08', -relheight => '0.04' );

my $br3 = '';
my $ct3 = 0;
my $ll3 = $mw->Label( -textvariable => \$br3 );
my $bn3 = $mw->Button( -text => 'cleanup',
		       -command => sub { $ct3 = $ct3 + 1;
					 $br3 = 'The ' . $ct3 . '-th Clean-up!';
					 system( "./cleanup.sh" ); } );
$bn3->place( -relx => '0.00', -relwidth  => '0.20',
	     -rely => '0.12', -relheight => '0.04' );
$ll3->place( -relx => '0.20', -relwidth  => '0.80',
	     -rely => '0.12', -relheight => '0.04' );

my $bn4 = $mw->Button( -text => 'quit', -command => \&exit );
$bn4->place( -relx => '0.00', -relwidth  => '0.20',
	     -rely => '0.16', -relheight => '0.04' );

my $fm0 = $mw->Frame();
my $ll00 = $fm0->Label( -text => 'Main' );
my $tt00 = $fm0->Scrolled( 'Text',
			   -background => 'white',
			   -scrollbars => 'se',
			   -wrap => 'none' );
$fm0->place( -relx => '0.00', -relwidth  => '0.50',
	     -rely => '0.20', -relheight => '0.80' );
$ll00->pack( -fill => 'both' );
$tt00->pack( -fill => 'both', -expand => 'true' );

my $fm1 = $mw->Frame();
my $ll10 = $fm1->Label( -text => 'State' );
my $tt10 = $fm1->Scrolled( 'Text',
			   -background => 'white',
			   -scrollbars => 'se',
			   -wrap => 'none' );
$fm1->place( -relx => '0.50', -relwidth  => '0.50',
	     -rely => '0.20', -relheight => '0.40' );
$ll10->pack( -fill => 'both' );
$tt10->pack( -fill => 'both', -expand => 'true' );

my $fm2 = $mw->Frame();
my $ll20 = $fm2->Label( -text => 'Delete' );
my $tt20 = $fm2->Scrolled( 'Text',
			   -background => 'white',
			   -scrollbars => 'se',
			   -wrap => 'none' );
$fm2->place( -relx => '0.50', -relwidth  => '0.50',
	     -rely => '0.60', -relheight => '0.40' );
$ll20->pack( -fill => 'both' );
$tt20->pack( -fill => 'both', -expand => 'true' );

sub fun2 {
    unless ( Exists( $tl20 ) ) {
	my $tl20 = $mw->Toplevel( -title => 'Xcryptdel' );
	my $lx20 = $tl20->Listbox();
	$lx20->pack( -side => 'left' );

	my $bn20 = $tl20->Button( -text => 'OK', -command => \&foo );
	$bn20->pack( -fill => 'x' );

	my $bn21 = $tl20->Button( -text => 'Cancel',
				  -command => ['destroy', $tl20] );
	$bn21->pack( -fill => 'x' );

	open( ID, '< inv_watch/.request_ids' );
	my @allarr = split( / /, <ID> );
	my %allhash = @allarr;
	my @fileID = values(%allhash);
	foreach (@fileID) {
	    $lx20->insert('end', $_);
	    $lx20->yview('end');
	}
    }
}

sub foo {
    my @index = $lx20->curselection();
    unless (@index eq ()) {
	foreach (@index) {
	    my $job = $lx20->get($_);
	    $eof2 = 0;
	    open( PIPE2, "xcryptdel $job |" ) or warn "Can't delete $job";
	    $mw->fileevent( \*PIPE2, 'readable', \&bar2 );

	    $mw->waitVariable(\$eof2);
	    $mw->fileevent( \*PIPE2, 'readable' => '' );
	    close PIPE2;

	    $tl20->destroy();
	}
    }
}

sub bar {
    my ($widget, $pipe) = @_;

    my($stat, $data);
    $stat = sysread $pipe, $data, 4096;
    die "sysread error:  $!" unless defined $stat;
    $widget->insert('end', $data);
    $widget->yview('end');

}

sub bar0 {
    my $data;
    my $stat = sysread PIPE0, $data, 4096;
    die "sysread error:  $!" unless defined $stat;
    $tt00->insert('end', $data);
    $tt00->yview('end');

    if ($stat == 0) { $eof0 = 1; }
}

sub bar2 {
    my $data;
    my $stat = sysread PIPE2, $data, 4096;
    die "sysread error:  $!" unless defined $stat;
    $tt20->insert('end', $data);
    $tt20->yview('end');

    if ($stat == 0) { $eof2 = 1; }
}

sub fun0 {
    my $filename = $mw->getOpenFile( -filetypes => [['Xcrypt Files', ['.xcr']]]);
    unless ($filename eq '') {
	$br0 = "$filename";
	$eof0 = 0;
	open( PIPE0, "xcrypt $filename|" ) or warn "Can't execute $filename";
	$mw->fileevent( \*PIPE0, 'readable', \&bar0 );

	$mw->waitVariable(\$eof0);
	$mw->fileevent( \*PIPE0, 'readable' => '' );
	close PIPE0;
    }
}

sub fun1 {
    open( PIPE1, "xcryptstat|" );
    while (<PIPE1>) {
	$tt10->insert('end', $_);
	$tt10->yview('end');
    }
    $tt10->insert('end', "--- 8< --- 8< --- 8< ---\n");
    $tt10->yview('end');
}




MainLoop();
