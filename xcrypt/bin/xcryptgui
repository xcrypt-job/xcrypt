#!/usr/bin/env perl

use Tk;

my $mw = MainWindow->new( -title => 'Xcrypt' );
$mw->geometry( '1000x1000' );

#my @fontlist = sort $mw->fontFamilies;
my @fontlist = ('Helvetica');
my $menufontsize = 12;
my $fontsize = 14;

$mw->optionAdd( '*Menu.font' => [$fontlist[0], $menufontsize, 'bold'] );
foreach ('*Button.font', '*Label.font') {
    $mw->optionAdd( "$_" => [$fontlist[0], $fontsize, 'bold'] );
}

our ($eof0, $eof2);
our $statcount;

my @cor = ('xcrypt...', 'xcryptstat', 'xcryptdel...');
my @corr = ('Main', 'State', 'Deleted');
my $max = 2;
my $height = 0.15 / (1+$max);
my $width = 1 / (1+$max);

$mn = $mw->Menu();
$mn->optionAdd( '*Menu.font' => [$fontlist[0], $menufontsize, 'bold'] );

$mw->configure( -menu => $mn );
$mn->add( 'cascade', -label => 'File' );
$mn->add( 'cascade', -label => 'View' );
$mn->add( 'cascade', -label => 'Tool' );
$mn->add( 'cascade', -label => 'Help' );

$file = $mn->Menu();
$mn->entryconfigure( 'File', -menu => $file );

foreach (0..$max) {
    my $aaa = $cor[$_];
    my $eee = $corr[$_];
    my $ccc = 'bn' . $_;
    my $fff = 'br' . $_;
    my $bbb = 'fm' . $_;
    my $foo = 'll' . $_ . '0';
    my $bar = 'tt' . $_ . '0';

    eval "our \$$fff = \'\';";
    eval "our \$$foo = \$mw->Label();";
    ${$foo}->configure( -textvariable => \$$fff );

    ${$foo}->place( -relx => 0.2,            -relwidth  => 0.8,
		    -rely => ($_ * $height), -relheight => $height );


    $file->add( 'command', -label => "$aaa", -command => [\&fun, $_] );

    eval "our \$$ccc = \$mw->Button();";
    ${$ccc}->configure( -text => $aaa, -command => [\&fun, $_] );
    ${$ccc}->place( -relx => 0,              -relwidth  => 0.2,
		    -rely => ($_ * $height), -relheight => $height );
    eval "our \$$bbb = \$mw->Frame();";
    eval "our \$$foo = \$$bbb->Label();";
    ${$foo}->configure( -text => $eee );
    eval "our \$$bar = \$$bbb->Scrolled( \'Text\' );";
    ${$bar}->configure( -font => [$fontlist[0], $fontsize, 'normal'],
			-background => 'white',
			-scrollbars => 'se',
			-wrap => 'none' );

    ${$bbb}->place( -relx => ($_ * $width), -relwidth  => $width,
		    -rely => 0.15,          -relheight => 0.85    );
    ${$foo}->pack( -fill => 'both' );
    ${$bar}->pack( -fill => 'both', -expand => 'true' );
}

$file->add( 'command', -label => 'exit', -command => \&exit );

sub fun { eval "fun$_[0];"; }

sub fun2 {
    unless ( Exists( $tl20 ) ) {
	$tl20 = $mw->Toplevel( -title => 'Xcryptdel' );
	$lx20 = $tl20->Scrolled( 'Listbox',
				 -font => [$fontlist[0], $fontsize, 'bold'] );
	$lx20->pack( -side => 'left' );

	my $bn20 = $tl20->Button( -text => 'OK', -command => \&foo );
	$bn20->pack( -fill => 'x' );

	my $bn21 = $tl20->Button( -text => 'Cancel',
				  -command => ['destroy', $tl20] );
	$bn21->pack( -fill => 'x' );

	open( ID, '< inv_watch/.request_ids' );
	my @allarr = split( / /, <ID> );
	my %allhash = @allarr;
	my @fileID = values(%allhash);
	foreach (@fileID) {
	    $lx20->insert('end', $_);
	    $lx20->yview('end');
	}
    }
}

sub fun0 {
    my $filename = $mw->getOpenFile(
	-font => [$fontlist[0], $fontsize, 'normal'],
	-filetypes => [['Xcrypt Files', ['.xcr']],
		       ['All Files', ['*']]]);
    unless ($filename eq '') {
	$br0 = "xcrypt $filename";
	$eof0 = 0;
	open( PIPE0, "xcrypt $filename|" ) or warn "Can't execute $filename";
	$mw->fileevent( \*PIPE0, 'readable', [\&bar, 'tt00', 'PIPE0', 'eof0'] );

	$mw->waitVariable(\$eof0);
	$mw->fileevent( \*PIPE0, 'readable' => '' );
	close PIPE0;
    }
}

sub fun1 {
    $statcount = $statcount + 1;
    $br1 = "xcryptstat executed ($statcount times)";
    open( PIPE1, "xcryptstat|" );
    while (<PIPE1>) {
	$tt10->insert('end', $_);
	$tt10->yview('end');
    }
}

sub foo {
    my @index = $lx20->curselection();
    unless (@index eq ()) {
	foreach (@index) {
	    my $job = $lx20->get($_);
	    $eof2 = 0;
	    open( PIPE2, "xcryptdel $job |" ) or warn "Can't delete $job";
	    $mw->fileevent( \*PIPE2, 'readable', [\&bar, 'tt20', 'PIPE2', 'eof2'] );

	    $mw->waitVariable(\$eof2);
	    $mw->fileevent( \*PIPE2, 'readable' => '' );
	    close PIPE2;

	    $tl20->destroy();

	    $br2 = "xcryptdel $job";
	}
    }
}

sub bar {
    my ($widget, $pipe, $eof) = @_;

    my($stat, $data);
    $stat = sysread $pipe, $data, 4096;
    die "sysread error:  $!" unless defined $stat;
    ${$widget}->insert('end', $data);
    ${$widget}->yview('end');

    if ($stat == 0) { ${$eof} = 1; }
}

$view = $mn->Menu();
$mn->entryconfigure( 'View', -menu => $view );
$view->add( 'cascade', -label => 'Size' );
$size = $view->Menu();
$view->entryconfigure( 'Size', -menu => $size );
foreach (4..12) {
    my $ddd = 2 * $_;
    $size->add( 'command', -label => $ddd, -command => [\&hoge, $ddd] );
}

$tool = $mn->Menu();
$mn->entryconfigure( 'Tool', -menu => $tool );
$tool->add( 'command', -label => 'Clean', -command => sub { system( "./cleanup.sh" ); } );

$help = $mn->Menu();
$mn->entryconfigure( 'Help', -menu => $help );
$help->add( 'command', -label => 'Manual...', -command => sub { system( "acroread $ENV{XCRYPT}/doc/Xcrypt_manual.pdf" ); } );

sub hoge {
    $fontsize = $_[0];
    my @bold = ('ll0', 'll1', 'll2', 'bn0', 'bn1', 'bn2', 'll00', 'll10', 'll20');
    foreach (@bold) {
	${$_}->configure( -font => [$fontlist[0], $fontsize, 'bold']);
    }
    my @normal = ('tt00', 'tt10', 'tt20');
    foreach (@normal) {
	${$_}->configure( -font => [$fontlist[0], $fontsize, 'normal']);
    }
}

MainLoop();
