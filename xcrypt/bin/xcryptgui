#!/usr/bin/env perl

use Tk;
use Tk::Tiler;

my $mainwindow = MainWindow->new( -title => 'Xcrypt' );
$mainwindow->geometry( '1000x1000' );

#my @fontlist = sort $mainwindow->fontFamilies;
my @fontlist = ('Helvetica');
my $menufontsize = 12;
my $fontsize = 14;

$mainwindow->optionAdd( '*Menu.font' => [$fontlist[0], $menufontsize, 'bold'] );
foreach ('*Button.font', '*Label.font') {
    $mainwindow->optionAdd( "$_" => [$fontlist[0], $fontsize, 'bold'] );
}

our ($eof0, $eof2);
our $statcount;

my @buttonnames = ('Xcrypt...', 'Xcryptstat', 'Xcryptdel...');
my @labelnames = ('Main', 'Status', 'Aborted');
my $max = 2;
my $height = 0.15 / (1+$max);
my $width = 1 / (1+$max);

$menu = $mainwindow->Menu();
$menu->optionAdd( '*Menu.font' => [$fontlist[0], $menufontsize, 'bold'] );

$mainwindow->configure( -menu => $menu );
$menu->add( 'cascade', -label => 'File' );
$menu->add( 'cascade', -label => 'View' );
$menu->add( 'cascade', -label => 'Tool' );
$menu->add( 'cascade', -label => 'Help' );

$file = $menu->Menu();
$menu->entryconfigure( 'File', -menu => $file );

foreach (0..$max) {
    my $button = $buttonnames[$_];
    my $label = $labelnames[$_];

    my $buttonname = 'button' . $_;
    eval "our \$$buttonname = \$mainwindow->Button();";
    ${$buttonname}->configure( -text => $button, -command => [\&fun, $_] );
    ${$buttonname}->place( -relx => 0,              -relwidth  => 0.2,
			   -rely => ($_ * $height), -relheight => $height );

    my $buffername = 'buffer' . $_;
    eval "our \$$buffername = \'\';";

    my $framename = 'frame' . $_;
    eval "our \$$framename = \$mainwindow->Frame();";
    ${$framename}->place( -relx => ($_ * $width), -relwidth  => $width,
			  -rely => 0.15,          -relheight => 0.85    );

    my $labelname = 'label' . $_ ;
    eval "our \$$labelname = \$mainwindow->Label();";
    ${$labelname}->configure( -textvariable => \$$buffername );
    ${$labelname}->place( -relx => 0.2,            -relwidth  => 0.8,
			  -rely => ($_ * $height), -relheight => $height );

    my $sublabel = 'sublabel' . $_;
    eval "our \$$sublabel = \$$framename->Label();";
    ${$sublabel}->configure( -text => $label );
    ${$sublabel}->pack( -fill => 'both' );

    my $text = 'text' . $_;
    eval "our \$$text = \$$framename->Scrolled( \'Text\' );";
    ${$text}->configure( -font => [$fontlist[0], $fontsize, 'normal'],
			-background => 'white',
			-scrollbars => 'se',
			-wrap => 'none' );
    ${$text}->pack( -fill => 'both', -expand => 'true' );

    $file->add( 'command', -label => "$button", -command => [\&fun, $_] );
}

$file->add( 'separator' );
$file->add( 'command', -label => 'Exit', -command => \&exit );

sub fun { eval "fun$_[0];"; }

sub fun2 {
    unless ( Exists( $toplevel2 ) ) {
	$toplevel2 = $mainwindow->Toplevel( -title => 'Xcryptdel' );
	my $listbox = $toplevel2->Scrolled( 'Listbox',
					    -font => [$fontlist[0],
						      $fontsize, 'bold'] );
	$listbox->pack( -side => 'left' );

	my $button0 = $toplevel2->Button( -text => 'OK',
					  -command => sub {
my @index = $listbox->curselection();
unless (@index eq ()) {
    foreach (@index) {
	my $job = $listbox->get($_);
	$eof2 = 0;
	open( PIPE2, "xcryptdel $job |" ) or warn "Can't delete $job";
	$mainwindow->fileevent( \*PIPE2, 'readable',
				[\&connect, 'text2', 'PIPE2', 'eof2'] );

	$mainwindow->waitVariable(\$eof2);
	$mainwindow->fileevent( \*PIPE2, 'readable' => '' );
	close PIPE2;

	$toplevel2->destroy();

	$buffer2 = "xcryptdel $job";
    }
}
					 });

	$button0->pack( -fill => 'x' );

	my $button1 = $toplevel2->Button( -text => 'Cancel',
					  -command => ['destroy', $toplevel2] );
	$button1->pack( -fill => 'x' );

	open( ID, '< inv_watch/.request_ids' );
	my @reqid_jobids = split( / /, <ID> );
	my %hash = @reqid_jobids;
	my @jobids = values(%hash);
	foreach (@jobids) {
	    $listbox->insert('end', $_);
	    $listbox->yview('end');
	}
    }
}

sub fun0 {
    my $filename = $mainwindow->getOpenFile(
	-font => [$fontlist[0], $fontsize, 'normal'],
	-filetypes => [['Xcrypt Files', ['.xcr']],
		       ['All Files', ['*']]]);
    unless ($filename eq '') {
	$buffer0 = "xcrypt $filename";
	$eof0 = 0;
	open( PIPE0, "xcrypt $filename|" ) or warn "Can't execute $filename";
	$mainwindow->fileevent( \*PIPE0, 'readable',
				[\&connect, 'text0', 'PIPE0', 'eof0'] );

	$mainwindow->waitVariable(\$eof0);
	$mainwindow->fileevent( \*PIPE0, 'readable' => '' );
	close PIPE0;
    }
}

sub fun1 {
    $statcount = $statcount + 1;
    $buffer1 = "xcryptstat executed ($statcount times)";
    open( PIPE1, "xcryptstat|" );
    while (<PIPE1>) {
	$text1->insert('end', $_);
	$text1->yview('end');
    }
}


sub connect {
    my ($widget, $pipe, $eof) = @_;

    my($stat, $data);
    $stat = sysread $pipe, $data, 4096;
    die "sysread error:  $!" unless defined $stat;
    if ($data =~ / abort$/) { $text2->insert('end', $data); }
    ${$widget}->insert('end', $data);
    ${$widget}->yview('end');

    if ($stat == 0) { ${$eof} = 1; }
}

$view = $menu->Menu();
$menu->entryconfigure( 'View', -menu => $view );
$view->add( 'cascade', -label => 'Size' );
$size = $view->Menu();
$view->entryconfigure( 'Size', -menu => $size );
foreach (8..24) {
    $size->add( 'command', -label => $_, -command => [\&sizechange, $_] );
}

sub sizechange {
    $fontsize = $_[0];
    my @bold = ('label0', 'label1', 'label2',
		'button0', 'button1', 'button2',
		'sublabel0', 'sublabel1', 'sublabel2');
    foreach (@bold) {
	${$_}->configure( -font => [$fontlist[0], $fontsize, 'bold']);
    }
    my @normal = ('text0', 'text1', 'text2');
    foreach (@normal) {
	${$_}->configure( -font => [$fontlist[0], $fontsize, 'normal']);
    }
}

$tool = $menu->Menu();
$menu->entryconfigure( 'Tool', -menu => $tool );
$tool->add( 'command', -label => 'Clean',
	    -command => sub { system( "./cleanup.sh" ); } );
$tool->add( 'command', -label => 'Monitor', -command => \&monitor );

my $tiler0;
sub monitoring {

    if ( Exists( $tiler0 ) ) { $tiler0->destroy; }

    $tiler0 = $toplevel3->Scrolled( 'Tiler', -scrollbars => 'e',
				    -columns => 10,
				    -rows => 5 );

    open( REQ, '< inv_watch/.request_ids' );
    my %reqid_jobids = split(' ', <REQ>);
    my @jobids = sort values(%reqid_jobids);
    close( REQ );
    my %jobcolors = ( 'done' => 'green',
		      'abort' => 'red',
		      'aborted' => 'red',
		      'submit' => 'yellow',
		      'submitted' => 'yellow',
		      'queued' => 'yellow',
		      'runnning' => 'yellow',
		      'qsub' => 'yellow',
		      'active' => 'yellow' );

    my @labels;
    foreach (@jobids) {
	open( JOB, "< inv_watch/$_" );
	while( $line = <JOB> ){
	    if ($line =~ /^status\:\s*(.+)/) {
		$status = $1;
	    }
	}
	close( JOB );
	push @labels, $tiler0->Label( -text => $_,
				      -relief => 'raised',
				      -borderwidth => '2',
				      -background => $jobcolors{$status} );
    }
    $tiler0->Manage(@labels);
    $tiler0->pack( -expand => 'yes', -fill => 'both' );
}

sub monitor {
    unless ( Exists( $toplevel3 ) ) {
	$toplevel3 = $mainwindow->Toplevel( -title => 'Monitor' );

	my $button1 = $toplevel3->Button( -text => 'Close',
					  -command => ['destroy', $toplevel3] );
	$button1->pack( -expand => 'yes', -fill => 'both', -side => 'right' );

	my $button0 = $toplevel3->Button( -text => 'Reload',
					  -command => \&monitoring );
	$button0->pack( -expand => 'yes', -fill => 'both', -side => 'right' );

	&monitoring();
    }
}

$help = $menu->Menu();
$menu->entryconfigure( 'Help', -menu => $help );
$help->add( 'command', -label => 'Manual...', -command => sub { system( "acroread $ENV{XCRYPT}/doc/Xcrypt_manual.pdf" ); } );

MainLoop();
