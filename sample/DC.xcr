use base qw(DC core);

sub func0
{
	$job = shift;
	print "User function"."\n";
	if($job->{arg0} > 10)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

sub func1
{
	my $job = shift;
	print "User Function divide"."\n";

=comment
	my %j1;
	foreach (keys(%$job)) {
	    $j1{"$_"}= $job->{"$_"};
	}
	$j1{'id'} = $j1{'id'}."_".($j1{'arg0'}-1);
	$j1{'arg0'} = $j1{'arg0'}-1;
	my %j2;
	foreach (keys(%$job)) {
	    $j2{"$_"}= $job->{"$_"};
	}
	$j2{'id'} = $j2{'id'}."_".($j2{'arg0'}-2);
	$j2{'arg0'} = $j2{'arg0'}-2;

	print $j1{'arg0'}, "\n";
	print $j2{'arg0'}, "\n";
=cut
	my %j1 = (
		'id' => $job->{id}."_".($job->{arg0}-1),
		'exe' => $job->{exe},
		'arg0' => $job->{arg0}-1,
		'queue' => $job->{queue},
		'canDivideFunc' => $job->{canDivideFunc},
		'divideFunc' => $job->{divideFunc},
		'mergeFunc' => $job->{mergeFunc},
		'group' => $job->{group},
		'ofname' => $job->{ofname}
	);
	my %j2 = (
		'id' => $job->{id}."_".($job->{arg0}-2),
		'exe' => $job->{exe},
		'arg0' => $job->{arg0}-2,
		'canDivideFunc' => $job->{canDivideFunc},
		'divideFunc' => $job->{divideFunc},
		'mergeFunc' => $job->{mergeFunc},
		'queue' => $job->{queue},
		'group' => $job->{group},
		'ofname' => $job->{ofname}
	);

	my @children = ();
	push(@children, \%j1);
	push(@children, \%j2);
	return @children;
}

sub func2
{
	my $ofname = shift;
	#my @results = @{shift};
	print "User Function merge"."\n";
	my $val = 0;
	foreach my $result (@_)
	{
		open(FH,"<".$result->{id}."/".$result->{ofname});
		my $line = <FH>;
		$val += $line;
		print $line."\n";
		close(FH);
	}
	print $ofname."\n";
	open(OUT,">".$ofname);
	print OUT $val;
	close(OUT);
}

%template = (
    'id' => 'job0',
    'exe' => "$ENV{'XCRYPT'}/sample/DC/fib.out",
    'arg0' => 13,
    'canDivideFunc' => \&func0,
    'divideFunc' => \&func1,
    'mergeFunc' => \&func2,
    'queue' => 'gh10034',
    'group' => 'gh10034',
    'ofname' => 'out'
);

@results = &prepare_submit_sync(%template);
#foreach (@results) { print $_->{stdout} , "\n"; }
#print "---------------\n";
