use base qw(limit core);
use threads::shared;
use jobsched;

&limit::initialize(10);

%template = (
    'id' => 'job6',                # easy job-id for user to understand
    'exe' => './fib',
    'arg0' => '30',
    'arg1' => '> out',             # i.e., $ ./fib 50 > out
    'linkedfile0' => 'common/fib', # where exe-file exists
    'queue' => 'gh10034',          #
#
    'option' => '# @$-g gh10034',  # pragma at kyoto-u
);

@jobs = &prepare(%template,
#		 'arg0@' => [20..22] # i.e., $ qsub ./fib 20 > out
#                                            $ qsub ./fib 21 > out
#                                            $ qsub ./fib 22 > out
#		 'arg0@' => [20..29]
#		 'RANGE0' => [0..2], 'arg0@' => [20..21]
 'RANGE0' => [1,5], 'RANGE2' => [2,7], 'arg0@' => '$R0 + $R2;'
# 'RANGE0' => [1], 'RANGE2' => [2], 'arg0@' => '$R0 + 40 + $R2;'
    );
&submit(@jobs);
our $hoge : shared = 'HOGE';
#&addperiodiccheck('&user::foo($user::hoge);');
&addperiodiccheck('print &builtin::getelapsedtime("job6_1_nil_2"), "\n";');
&sync(@jobs);

sub foo {
    print STDOUT "$_[0]\n";
}
