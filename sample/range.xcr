use base qw(core);

%template1 = (
    'id@' => sub { "job6_" . $RANGE0 . '_' . $RANGE2 },
#    'exe0@' => sub { 'bin/fib ' . ($_[0] + $_[2]) . " > out_$_[0]_$_[2]"},
    'exe0@' => sub {
	'bin/fib '. ($RANGE0 + $RANGE2) . ' > out_' . $RANGE0 . '_' . $RANGE2
    },
    'RANGE0' => [20..22],
    'RANGE2' => [0,3],
#    'RANGES' => [[20..22],[0],[0,3]],
    'JS_queue' => 'gh10034',
    'JS_group' => 'gh10034',
#    'before' => sub { print $self->{'VALUE2'}, "\n"; }
#    'before' => sub { print ${$self->{'VALUES'}}[2], "\n"; }
#    'before' => sub { print "$self->{exe0}\n"; print "$_[1]\n"; print "$_[3],\n"; },
    'before' => sub { print "$self->{exe0}\n";
		      print "$RANGE0\n"; }
    'after'  => sub { print "$self->{exe0}\n";
		      print "$RANGE2\n"; }
);

my @jobs = &prepare(%template1);
print &jobsched::get_job_status($jobs[0]), "\n";
&submit(@jobs);
print &jobsched::get_job_status($jobs[0]), "\n";
&sync(@jobs);




















=comment

%template2 = (
    'id@' => sub { "job6_$_[0]_$_[1]"; },
#    'id' => 'job6',
    'exe' => 'bin/fib',
    'RANGE0' => [31,32],
    'RANGE1' => [0,2],
    'arg0@' => '$_[0] + $_[1]',
    'arg1@' => sub { "> out_$_[0]_$_[1]" }
);
&prepare_submit_sync(%template2);

=cut
