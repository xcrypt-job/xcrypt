# A sample of spawn{}: Multithreading language like notation for submitting jobs
use base qw(sandbox core);

# Global variable named $i can be read (cannot be written) to from spawn bodies.
$TEMPLATE{transfer_variable}=['$i'];

foreach $i (10..20) {
    # Submit a job that executes the spawn{} body in the job
    my ($j) = spawn {
        # The job object is given as the first argument
        my $self=shift;
        print "exe: $self->{id}\n";
        # The global variable $i defined in Xcrypt script can be read
        # because it is contained in $TEMPLATE{transfer_variable}
        system ("../bin/fib $i > out"); # Use Perl system() function instead of 'exe0'
    }_before_{
        # This body is executed in Xcrypt process before submitting the job (optional)
        my $self = shift;
        print 'Submitting '. $self->{id} ."\n";
    }_after_{
        # This body is executed in Xcrypt process after the job is done (optional)
        my $self = shift;
        print 'The job '. $self->{id} ." is finished.\n";
    };
    # You can set additional parameters as follows (like prepare())
    # This parenthesis is optional (even 'id'!)
    # } (id => 'jobspn', JS_cpu => 1);
    print 'Spawned '.$j->{id}."\n";
}
sync;
