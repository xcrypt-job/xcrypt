# A sample of user defined signal handler.
# Push CTRL+C during the execution of this script to try this functionality.
use base qw(core);

# If defined, called when ^C is pressed.
sub sigint_handler {
  print "User's SIGINT handler is called.\n";
}

%template = (
    'id' => 'jobsig',
    # 10 jobs that are characterized by (30,0), (30,1), ..., (30,4), (40,0), ...,(40,4)
    'RANGE0' => [30,40],      
    'RANGE1' => [0..4],
    # All the jobs have parameter 'exe0' whose value is './bin/fib'
    'exe0' => './bin/fib',
    # For parameter whose value is different for each job:
    # * Parameter name is postfixed by '@'
    # * Parameter value is defined as function that returns a parameter value
    # In the function, $VALUE[i] can be used to refer to the assigned value
    # from the RANGE[i], and $self can be used to refer to the job object.
    'arg0_0@' => sub {$VALUE[0]+$VALUE[1]},
    'arg0_1@' => sub {"> out_$self->{id}"},
    # Exectuted asynchronously before submitting a job
    'before' => sub {
        print "Submitting $self->{id}\n";
    },
    # Exectuted asynchronously after the job is done
    'after' => sub {
        print "$self->{id} finished\n";
    } 
    );
prepare_submit_sync (%template);
