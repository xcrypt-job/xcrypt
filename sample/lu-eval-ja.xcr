use base qw(core);
$separation_symbol = '-';

# 並列LU分解を，N=2000,4000，コア数1,2,4,8,16でそれそれ3回実行して性能評価
prepare_submit_sync (
     'id' => 'job_lu',            # ジョブの名前
     'RANGE0' => [1,2,4,8,16],    # コア数
     'RANGE1' => [2000,4000],     # 行列のサイズ
     'RANGE2' => [1..3],          # 繰り返し実行回数
     'exe' => './lu-gcc',         # 実行ファイル
     'copiedfile0' => './lu-gcc', # 計算ノードにコピーするファイル
     'arg0S' => sub {"-n $_[0]";},# コマンドライン引数0（並列数）
     'arg1S' => sub {"-i \"0 0 $_[1] 2 0\""}, # コマンドライン引数1（行列サイズ） 
     'cpuS' => sub { $_[0]; },    # 獲得コア数
     'proc' => 1,                 # 獲得ノード数
     'queue' => 'gh10034',        # ジョブキュー名
     'option' => '# @$-g gh10034'
     );

# 並列fibを，N=40,44，コア数1,2,4,8,16でそれそれ3回実行して性能評価
# prepare_submit_sync (
#      'id' => 'job_fib',           # ジョブの名前
#      'RANGE0' => [1,2,4,8,16],    # コア数
#      'RANGE1' => [40,44],         # 行列のサイズ
#      'RANGE2' => [1..3],          # 繰り返し実行回数
#      'exe' => './fib-gcc',        # 実行ファイル
#      'copiedfile0' => './fib-gcc',# 計算ノードにコピーするファイル
#      'arg0S' => sub {"-n $_[0]";},# コマンドライン引数0（並列数）
#      'arg1S' => sub {"-i \"1 $_[1]\""}, # コマンドライン引数1（行列サイズ） 
#      'arg2' => "-v 1",
#      'cpuS' => sub { $_[0]; },    # 獲得コア数
#      'proc' => 1,                 # 獲得ノード数
#      'queue' => 'gh10034',        # ジョブキュー名
#      'option' => '# @$-g gh10034'
#      );
