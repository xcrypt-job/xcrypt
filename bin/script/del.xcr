use base qw(core);
use File::Spec;
use File::Path;
use Getopt::Long;
use common;

our %options = ();
my @job_statuses = qw(initialized prepared submitted queued running done finished aborted); # ジョブ状態一覧

my @help = (
    q /xcryptdel [--all] [--name regexp] [--status regexp]/,
    q /          [--abort] [--cancel] [--invalidate] [--uninitialize] [--finish]/,
    q /          [--help] [--clean]/,
    q /Options:/,
    q /[job selection options]/,
    q /--all           select all the jobs./,
    q /--name          select jobs whose ids match regexp./,
    q /--status        select jobs whose status name match the regexp./,
    q //,
    q /[delete options]/,
    q /--abort (default)         delete unfinished jobs with making aborted (default)/,
    q /--cancel,--uninitialize   delete jobs with making uninitialized./,
    q /--invalidate,--finish     delete jobs with making finished./,
    q //,
    q /[other options]/,
    q /--clean         delete all the Xcrypt log information in this directory./,
    q /--help          shows this message/,
);


### Read command line options
GetOptions(\%options,
            'all'   ,
	    'name=s'   => \&set_regexp_option,
	    'status=s' => \&set_regexp_option,
            'abort'  ,
            'cancel'   ,
            'uninitialize' => sub { $options{cancel} = 1 } ,
            'invalidate'   ,
            'finish'       => sub { $options{invalidate} = 1 } ,
            'clean'   ,
            'help'   ,
    );
# Show help and exit
if (defined $options{'help'}) {
    foreach (@help) {
        print $_ . "\n";
    }
    exit;
}
# Read redundant options as --name arguments
set_regexp_option ('name', @ARGV);
# Check delete options
{
    my $count = 0;
    foreach my $sigopt ('abort', 'cancel', 'invalidate') {
        if ($options{$sigopt}) { $count++; }
    }
    if ( $count == 0 ) {
        $options{abort} = 1;
        $count++;
    }
    if ( $count > 1 ) {
        die "You can specify only zero or one delete option.\n";
    }
}

### Main
my %Host_Ssh_Hash;
my $Inventory_Path = $xcropt::options{inventory_path};
if (defined $options{'clean'} || defined $options{'all'}) {
    foreach my $id (&jobsched::get_last_job_id) {
        &del($id);
    }
    if (defined $options{'clean'}) {
        my $count = 0;
        while (-e "$Inventory_Path.$count") {
            $count++;
        }
        rename $Inventory_Path, "$Inventory_Path.$count";
    }
} elsif (defined $options{'name'} || defined $options{'status'}) {
    my @last_ids = &jobsched::get_last_job_id;
    unless (@last_ids) {
        print "logfile or job's info not exists\n";
        exit;
    }
    if (defined $options{'name'}) {
        foreach my $id (@{$options{'name'}}) {
            my @del_job_ids = grep {$_ =~ /^$id$/} @last_ids;
            foreach my $id (@del_job_ids) {
                &del($id);
            }
        }
    } else {
        foreach my $id (@last_ids) {
            my $last_job_state = &jobsched::get_last_job_state($id);
            if (grep {&jobsched::get_last_job_state($id) =~ /$_/} @{$options{'status'}}) {
                &del($id);
            }
        }
    }
}

### Functions
sub set_regexp_option {
    my ($optname, @regexps) = @_;
    
    foreach my $regexp (@regexps) {
        if ($optname eq 'status' and (!grep {$_ =~ $regexp} @job_statuses)) {
            print STDERR 'error status regexp' . "\n";
        }
        if (exists $options{$optname}) {
            push (@{$options{$optname}}, $regexp);
        } else {
            $options{$optname} = [$regexp];
        }
    }
}

sub delete_signal_files {
    my $id = shift;
    foreach my $sig ('uninitialized', 'finished', 'aborted') {
        File::Path::rmtree (File::Spec->catfile($Inventory_Path, $id .'_to_be_ '. $sig));
    }
}

sub del {
    my $id = shift;
    &qdel($id);
    delete_signal_files ($id);
    if ($options{'abort'}) {
	mkdir File::Spec->catfile($Inventory_Path, $id.'_to_be_aborted');
	print "$id is signaled to be aborted.\n";
    }
    if ($options{'cancel'}) {
	mkdir File::Spec->catfile($Inventory_Path, $id.'_to_be_uninitialized');
	print "$id is signaled to be uninitialized.\n";
    }
    if ($options{'invalidate'}) {
	mkdir File::Spec->catfile($Inventory_Path, $id .'_to_be_finished');
	print "$id is signaled to be finished.\n";
    }
}

sub qdel {
    my ($id) = @_;
    if (defined &jobsched::get_last_job_request_id($id)) {
	if (&jobsched::get_last_job_location($id) eq 'remote') {
	    unless (exists $Host_Ssh_Hash{&jobsched::get_last_job_userhost($id)}) {
		my ($user, $host) = split(/@/, &jobsched::get_last_job_userhost($id));
		my $ssh = Net::OpenSSH->new($host, (user => $user));
		$ssh->error and die "Unable to establish SSH connection: " . $ssh->error;
		$Host_Ssh_Hash{&jobsched::get_last_job_userhost($id)} = $ssh;
	    }
	}
	my $running_file =
	    File::Spec->catfile(&jobsched::get_last_job_prefix($id),
				&jobsched::get_last_job_workdir($id),
				$id . '_is_running');
	my $done_file =
	    File::Spec->catfile(&jobsched::get_last_job_prefix($id),
				&jobsched::get_last_job_workdir($id),
				$id . '_is_done');
	if (&jobsched::get_last_job_location($id) eq 'local') {
	    unlink $running_file;
	    unlink $done_file;
	} else {
	    my $ssh = $Host_Ssh_Hash{&jobsched::get_last_job_userhost($id)};
	    $ssh->system("rm -rf $running_file") or warn $ssh->error;
	    $ssh->system("rm -rf $done_file") or warn $ssh->error;
	}
	if ((&jobsched::get_last_job_state($id) eq 'queued') ||
	    (&jobsched::get_last_job_state($id) eq 'running')) {
	    my $qdel_command = $jsconfig::jobsched_config{&jobsched::get_last_job_sched($id)}{qdel_command};
	    unless ( defined $qdel_command ) {
		die "qdel_command isn't defined in " . &jobsched::get_last_job_sched($id) . '.pm';
	    }
	    # execute qdel
	    my $command_string = any_to_string_spc ("$qdel_command ", &jobsched::get_last_job_request_id($id));
	    if (&jobsched::get_last_job_location($id) eq 'local') {
		print "Deleting $id (request ID: " . &jobsched::get_last_job_request_id($id) . ")\n";
		exec_async ($command_string);
	    } else {
		print "Deleting $id (request ID: " . &jobsched::get_last_job_request_id($id) . ")\n";
		my $ssh = $Host_Ssh_Hash{&jobsched::get_last_job_userhost($id)};
		$ssh->system("$command_string") or warn $ssh->error;
	    }
	}
    } 
}
