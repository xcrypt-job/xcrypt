use base qw(core);
use Getopt::Long;
use jobsched;
use common;
use Net::OpenSSH;

our %options = ();

my %keys = ('help' => '    show all the options',
	    'job=s' => '   show matched jobs',
	    'status=s' => 'show jobs of the state',
	    'output' => "  show standard outputs",
	    'error' => "   show standard errors",
    );
GetOptions(\%options, keys(%keys));

my $Inventory_Path = $xcropt::options{inventory_path};
if (defined $options{'help'}) {
    foreach my $key (keys(%keys)) {
	print $key . '  ' . $keys{$key}, "\n";
    }
} else {
    foreach my $id (keys %jobsched::Last_State) {
	if (defined $options{'job'}) {
	    if ($id =~ /$options{job}/) {
		&print_stat($id);
	    }
	} elsif (defined $options{'status'}) {
	    if ($jobsched::Last_State{$id} =~ /$options{status}/) {
		&print_stat($id);
	    }
	} else {
	    &print_stat($id);
	}
    }
}

my %ssh_opts = (
    copy_attrs => 1,      # -p preserver file attributes
    recursive => 1,       # -r recursive copy
    bwlimit => 10000000,  # -l the max size of a copied file
    glob => 1,            # enable globs (e.g. '*' for all files)
    quiet => 1,           # Quiet. Does not show progress
    );

sub print_stat {
    my $id = shift;
    print "$id = $jobsched::Last_State{$id}";
    if ( $jobsched::Last_Request_ID{$id} ) {
	print " (request_ID=$jobsched::Last_Request_ID{$id})";
    }
    print "\n";
    if (defined $options{'output'}) {
	print '=' . $id . "'s stdout=\n";
	my $tmp = File::Spec->catfile($jobsched::Last_Workdir{$id},
				      $jobsched::Last_Stdout{$id});
	unless ($jobsched::Last_Userhost_ID{$id} eq 'local') {
	    unless(-e $tmp) {
		my ($user, $host) = split(/@/, $jobsched::Last_Userhost_ID{$id});
		$ssh = Net::OpenSSH->new($host, (user => $user));
		$ssh->scp_get(\%ssh_opts, File::Spec->catfile($jobsched::Last_Prefix{$id}, $tmp), $tmp) or warn $ssh->error;
	    }
	}
	open(my $out, $tmp) or die $!;
	foreach (<$out>) { print "$_"; }
	close($out);
    }
    if (defined $options{'error'}) {
	print '=' . $id . "'s stderr=\n";
	my $tmp = File::Spec->catfile($jobsched::Last_Workdir{$id},
				      $jobsched::Last_Stderr{$id});
	unless ($jobsched::Last_Userhost_ID{$id} eq 'local') {
	    unless (-e $tmp) {
		my ($user, $host) = split(/@/, $jobsched::Last_Userhost_ID{$id});
		$ssh = Net::OpenSSH->new($host, (user => $user));
		$ssh->scp_get(\%ssh_opts, File::Spec->catfile($jobsched::Last_Prefix{$id}, $tmp), $tmp) or warn $ssh->error;
	    }
	}
	open(my $out, $tmp) or die $!;
	foreach (<$out>) { print "$_"; }
	close($out);
    }
}
