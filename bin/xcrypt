#!/usr/bin/env perl
package xcrypt;

use strict;
use File::Copy;
use File::Spec;
use File::Basename;
use Getopt::Long;

my $xcrfile = shift @ARGV;
if (File::Spec->catfile(basename($xcrfile)) !~ /\.xcr\Z/) {
    die "The first argument should be an Xcrypt script.\n";
}

my $xcrplfile = "$xcrfile" . '.pl';
if ( -e $xcrplfile ) { unlink $xcrplfile; }

open(USER , "< $xcrfile") or die "Can't open $xcrfile\n";
open(TMP , "> $xcrplfile") or die "Can't open $xcrplfile\n";
print TMP 'package user;' . "\n";
print TMP 'use xcropt;' . "\n";
print TMP 'use builtin;' . "\n";
print TMP 'use Coro;' . "\n";
print TMP 'use jobsched;' . "\n";
print TMP 'our $max_exe_etc = \'15\';' . "\n";
print TMP 'our $max_arg = \'63\';' . "\n";
print TMP 'our $maxrange = \'7\';' . "\n";
print TMP 'our $expandingchar = \'@\';' . "\n";
print TMP 'our $smph : shared;' . "\n";
print TMP 'our $separator_nocheck = \'0\';' . "\n";
print TMP 'our $separator = \'_\';' . "\n";
print TMP '&jobsched::invoke_abort_check();' . "\n";
#print TMP '&jobsched::invoke_periodic();' . "\n";
print TMP 'sub before {my $self = shift;if ($self->{before}) {&{$self->{before}}($self)};}' . "\n";
print TMP 'sub start  {my $self = shift;$self->SUPER::start();}' . "\n";
print TMP 'sub after  {my $self = shift;if ($self->{after}) {&{$self->{after}}($self)};}' . "\n";

print TMP '# Up to here Xcrypt\'s header.  From here your script.' . "\n";
#print TMP 'foreach (async {' . "\n";
foreach (<USER>) { print TMP "$_"; }
#print TMP '}, async { print "hoge\n"; &jobsched::invoke_watch(); print "hage\n"; }) { $_->join; }' . "\n";
print TMP '# Up to here your script.  From here Xcrypt\'s footer.' . "\n";
print TMP '&jobsched::check_and_write_aborted();' . "\n";
#print TMP 'sleep(1);' . "\n";
close(TMP);
close(USER);

chmod 0755, $xcrplfile or die "Can't chmod $xcrplfile\n";
my $exitcode = system("perl $xcrplfile " . join(' ', @ARGV));
unless ($exitcode == 0) { die "Can't perl $xcrplfile\n"; }
