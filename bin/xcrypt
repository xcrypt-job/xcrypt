#!/usr/bin/env perl
package xcrypt;

use strict;
use File::Copy;
use File::Spec;
use File::Basename;
#use Getopt::Long;

my $xcrfile = shift @ARGV;

if (File::Spec->catfile(basename($xcrfile)) !~ /\.xcr\Z/) {
print $xcrfile;
    warn "The file extension should be .xcr\n";
}

my $added_path = File::Spec->catfile($ENV{XCRYPT}, 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'cpan');
if (defined $ENV{PERL5LIB}) {
    $ENV{PERL5LIB} = $ENV{PERL5LIB} . ':' . $added_path;
} else {
    $ENV{PERL5LIB} = $added_path;
}

# Delete the .xcr.pl file if the old one exists.
#my $xcrplfile = "$xcrfile" . '.pl';
#if ( -e $xcrplfile ) { unlink $xcrplfile; }

open(my $USER, "<", $xcrfile) or die "Can't open $xcrfile\n";
#open(my $TMP , ">", $xcrplfile) or die "Can't open $xcrfile\n";
open(my $TMP , "| perl - " . join(' ', @ARGV)) or die $!;
print $TMP 'package user;' . "\n";
print $TMP 'use xcropt;' . "\n";
print $TMP 'use builtin;' . "\n";
print $TMP 'use Coro;' . "\n";
print $TMP 'use jobsched;' . "\n";
print $TMP 'use data_generator;' . "\n";
print $TMP 'use data_extractor;' . "\n";
print $TMP 'our @VALUE = ();' . "\n";
print $TMP 'sub before {local ($self, @VALUE) = @_; if ($self->{before}) {&{$self->{before}}($self, @VALUE)};}' . "\n";
print $TMP 'sub start  {my $self = shift;$self->SUPER::start();}' . "\n";
print $TMP 'sub after  {local ($self, @VALUE) = @_; if ($self->{after} ) {&{$self->{after}}($self, @VALUE)};}' . "\n";
print $TMP '# Up to here Xcrypt\'s header.  From here your script.' . "\n";
print $TMP 'unless ($xcropt::options{scratch}) { &jobsched::read_log(); }' . "\n";
print $TMP '&jobsched::invoke_abort_check();' . "\n";
print $TMP '&jobsched::invoke_left_message_check();' . "\n";
#print $TMP '&jobsched::invoke_watch();' . "\n";
print $TMP '$builtin::env_d = &add_host({"host" => $xcropt::options{host}, "wd" => $xcropt::options{wd}}, "sched" => $xcropt::options{sched}, "xd" => $xcropt::options{xd}, "p5l" => $xcropt::options{p5l});' . "\n";
foreach (<$USER>) { print $TMP "$_"; }
print $TMP '# Up to here your script.  From here Xcrypt\'s footer.' . "\n";
close($TMP);
close($USER);

#my $exitcode = system("perl $xcrplfile " . join(' ', @ARGV));
#unless ($exitcode == 0) { die "Can't perl $xcrplfile\n"; }
