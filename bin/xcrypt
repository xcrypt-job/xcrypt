#!/usr/bin/env perl
package xcrypt;

use strict;
use Cwd;
use File::Copy;
use File::Spec;
use File::Temp qw/tempfile/;
use File::Basename;
use Getopt::Long qw(:config pass_through);
use Data::Dumper;
use lib ("$ENV{XCRYPT}/lib/cpan");
use Config::Simple;

our %options = (
#    'port' => 0, # インベントリ通知待ち受けポート．0ならNFS経由  # Obsolete
#    'comm_timeout' => 60, # timeout for inventory_write.pl       # Obsolete
    'abort_check_interval' => 19, # abortになったジョブをチェックする間隔(sec)
    'left_message_check_interval' => 3, # ジョブスクリプトが残したメッセージをチェックする間隔(sec)
    'inventory_path' => 'inv_watch',
    'verbose' => 0,               # verbose level
    'stack_size' => 32768,        # Perlスレッドのスタックサイズ
    # define other default values...
    );

GetOptions
    (\%options,
     'jobinfo',
     'compile_only',
     'xbs-auto',
     'xbs-type=s',
     'shared',
     'scratch',
     'config=s',
     #
     'host=s',
     'wd=s',
     'xd=s',
     'sched=s',
     #
#     'port=i',         # Obsolete
#     'comm_timeout=i', # Obsolete
     'abort_check_interval=i',
     'left_message_check_interval=i',
     'inventory_path=s',
     'verbose=i',
     'stack_size=i',
     # define other command-line options...
    );

if (defined $ENV{XCRJOBSCHED}) { warn 'The environment variable $XCRJOBSCHED is obsolete.  Use ~/.xcryptrc'; }
if (defined $ENV{XCRQUEUE}) { warn 'The environment variable $XCRQUEUE is obsolete.  Use ~/.xcryptrc'; }

my $added_path = File::Spec->catfile($ENV{XCRYPT}, 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'cpan') . ':'
    . File::Spec->catfile($options{inventory_path});
if (defined $ENV{PERL5LIB}) {
    $ENV{PERL5LIB} = $ENV{PERL5LIB} . ':' . $added_path;
} else {
    $ENV{PERL5LIB} = $added_path;
}

if (defined $options{'xbs-auto'}) { $options{'xbs-type'} = $options{sched}; }
if (defined $options{'xbs-type'}) { $options{sched} = 'XBS'; }

unless (defined $options{config}) {
    my $cfg_file = File::Spec->catfile($ENV{HOME}, '.xcryptrc');
    if (-e $cfg_file) {
	$options{config} = File::Spec->catfile($ENV{HOME}, '.xcryptrc');
    } else {
	$options{config} = File::Spec->catfile($ENV{XCRYPT}, 'etc', 'xcryptrc');
    }
}
my $cfg_obj = new Config::Simple($options{config});
my %cfg = $cfg_obj->vars();
foreach my $key (keys %cfg) {
    my @for_getting_real_key = split(/\./, $key);
    if ($for_getting_real_key[0] eq 'environment') {
	my $real_key = $for_getting_real_key[1];
	unless (defined $options{"$real_key"}) {
	    $options{"$real_key"} = $cfg{"$key"};
	}
    }
}
if ( $options{verbose} >= 1 ) {
    print "Loading $options{config}.\n";
}
my $host = qx/hostname/;
chomp $host;
my $username = qx/whoami/;
chomp $username;
unless (defined $options{host}) { $options{host} = $username . '@' . $host; }
my $wd = Cwd::getcwd();
unless (defined $options{wd}) { $options{wd} = $wd; }
unless (defined $options{xd}) { $options{xd} = $ENV{XCRYPT}; }
unless (defined $options{sched}) { $options{sched} = 'sh'; }
unless (-e File::Spec->catfile($ENV{XCRYPT}, 'lib', 'config', $options{sched}.".pm")) { die "No config file for $options{sched} ($options{sched}.pm)"; }

my $xcrfile;
my @argv;
foreach my $i (@ARGV) {
    if ($i =~ /\.xcr\Z/) { $xcrfile = $i;
    } elsif ($i eq '--') {
    } else { push(@argv, $i); }
}
@ARGV = @argv;
#if (File::Spec->catfile(basename($xcrfile)) !~ /\.xcr\Z/) {
if ($xcrfile !~ /\.xcr\Z/) {
    die "The file extension should be .xcr\n";
}

mkdir $options{inventory_path}, 0755;
my($HEADER, $tmp_filename) = tempfile( 'tempXXXXX', DIR => "$options{inventory_path}", SUFFIX => '.pm' );
print $HEADER 'package xcropt;' . "\n";
my $dumper = Data::Dumper->Dump([\%options],['options_tmp']);
print $HEADER 'my ' . $dumper . "\n";
print $HEADER 'our %options = %$options_tmp;' . "\n";
print $HEADER '1;' . "\n";
close($HEADER);
until (-e $tmp_filename) {
    sleep 1;
    print "a header file is being generated, please wait...\n";
}
open(my $USER, "<", $xcrfile) or die "Can't open $xcrfile\n";
my $header = basename($tmp_filename, '.pm');
my $TMP;
if (defined $options{compile_only}) {
    open($TMP , ">", $xcrfile . '.pl') or die $!;
} else {
    open($TMP , "| perl -m$header - " . join(' ', @ARGV)) or die $!;
}
print $TMP <<'EOH';
package user;
use builtin;
use Coro;
use jobsched;
use data_generator;
use data_extractor;
our @VALUE = ();
our %TEMPLATE;
&set_TEMPLATE();
sub before_in_xcrypt {local ($self, @VALUE) = @_; if ($self->{before_in_xcrypt}) {&{$self->{before_in_xcrypt}}($self, @VALUE)};}
sub before {local ($self, @VALUE) = @_; if ($self->{before}) {&{$self->{before}}($self, @VALUE)};}
sub start  {my $self = shift;$self->SUPER::start();}
sub after  {local ($self, @VALUE) = @_; if ($self->{after} ) {&{$self->{after}}($self, @VALUE)};}
sub after_in_xcrypt  {local ($self, @VALUE) = @_; if ($self->{after_in_xcrypt} ) {&{$self->{after_in_xcrypt}}($self, @VALUE)};}
$SIG{HUP} =  sub {(bless{},"user")->EVERY::sighup_handler(); print "Xcrypt is aborted by SIGHUP.\n"; exit(1);};
$SIG{INT} =  sub {(bless{},"user")->EVERY::sigint_handler(); print "Xcrypt is aborted by SIGINT.\n"; exit(1);};
$SIG{ABRT} = sub {(bless{},"user")->EVERY::sigabrt_handler(); print "Xcrypt is aborted by SIGABRT.\n"; exit(1);};
$SIG{TERM} = sub {(bless{},"user")->EVERY::sigterm_handler(); print "Xcrypt is aborted by SIGTERM.\n"; exit(1);};
unless ($xcropt::options{scratch}) { &jobsched::read_log(); }
&jobsched::invoke_abort_check();
&jobsched::invoke_left_message_check();
$builtin::env_d = &add_host({"host" => $xcropt::options{host}, "wd" => $xcropt::options{wd}, "sched" => $xcropt::options{sched}, "xd" => $xcropt::options{xd}});
EOH
foreach (<$USER>) { print $TMP "$_"; }
close($TMP);
close($USER);

#my $exitcode = system("perl -m$header[0] $xcrfile.pl " . join(' ', @ARGV));
#unless ($exitcode == 0) { die "Can't perl $xcrfile.pl\n"; }

#unlink $tmp_filename;
