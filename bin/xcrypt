#!/usr/bin/env perl
package xcrypt;

use strict;
use Cwd;
use File::Copy;
use File::Spec;
use File::Basename;
use Getopt::Long qw(:config pass_through);
use Data::Dumper;

my $localhost = qx/hostname/;
chomp $localhost;
my $username = qx/whoami/;
chomp $username;
my $wd = Cwd::getcwd();

our %options = (
#    'localhost' => $localhost,  # Obsolete
    'host' => $username . '@' . $localhost,
    'wd' => $wd,
    'xd' => $ENV{XCRYPT},
    'p5l' => $ENV{PERL5LIB},
    'sched' => $ENV{XCRJOBSCHED},
    #
#    'port' => 0, # インベントリ通知待ち受けポート．0ならNFS経由  # Obsolete
#    'comm_timeout' => 60, # timeout for inventory_write.pl       # Obsolete
    'abort_check_interval' => 19, # abortになったジョブをチェックする間隔(sec)
    'left_message_check_interval' => 2, # inventory_write.pl が残したメッセージをチェックする間隔(sec)
    'inventory_path' => 'inv_watch',
    #
    'verbose' => 0,               # verbose level
    'stack_size' => 32768,        # Perlスレッドのスタックサイズ
    # define other default values...
    );

GetOptions
    (\%options,
     'print_log',
     'xqsub',
     'shared',
     'scratch',
     #
#     'localhost=s',  # Obsolete
     'host=s',
     'wd=s',
     'xd=s',
     'p5l=s',
     'sched=s',
     #
#     'port=i',         # Obsolete
#     'comm_timeout=i', # Obsolete
     'abort_check_interval=i',
     'left_message_check_interval=i',
     'inventory_path=s',
     #
     'verbose=i',
     'stack_size=i',
     # define other command-line options...
    );

my $xcrfile = shift @ARGV;

if (File::Spec->catfile(basename($xcrfile)) !~ /\.xcr\Z/) {
    die "The file extension should be .xcr\n";
}

my $added_path = File::Spec->catfile($ENV{XCRYPT}, 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'cpan') . ':'
    . File::Spec->catfile($options{inventory_path});
if (defined $ENV{PERL5LIB}) {
    $ENV{PERL5LIB} = $ENV{PERL5LIB} . ':' . $added_path;
} else {
    $ENV{PERL5LIB} = $added_path;
}

my @tmp = split(/.xcr/, File::Spec->catfile(basename($xcrfile)));
my $header = $tmp[0];
my $headerfile =  $header . '.pm';
open(my $HEADER, ">", File::Spec->catfile($options{inventory_path}, $headerfile)) or die "Can't open $headerfile\n";
#open(my $HEADER, ">", $headerfile) or die "Can't open $headerfile\n";
print $HEADER 'package xcropt;' . "\n";
my $dumper = Data::Dumper->Dump([\%options],['options_tmp']);
print $HEADER 'my ' . $dumper . "\n";
print $HEADER 'our %options = %$options_tmp;' . "\n";
print $HEADER '1;' . "\n";
close($HEADER);
open(my $USER, "<", $xcrfile) or die "Can't open $xcrfile\n";
#my $xcrplfile = "$xcrfile" . '.pl';
#if ( -e $xcrplfile ) { unlink $xcrplfile; }
#open(my $TMP , ">", $xcrplfile) or die "Can't open $xcrfile\n";
open(my $TMP , "| perl -m$header - " . join(' ', @ARGV)) or die $!;
print $TMP 'package user;' . "\n";
#print $TMP 'use xcropt;' . "\n";
print $TMP 'use builtin;' . "\n";
print $TMP 'use Coro;' . "\n";
print $TMP 'use jobsched;' . "\n";
print $TMP 'use data_generator;' . "\n";
print $TMP 'use data_extractor;' . "\n";
print $TMP 'our @VALUE = ();' . "\n";
print $TMP 'sub before {local ($self, @VALUE) = @_; if ($self->{before}) {&{$self->{before}}($self, @VALUE)};}' . "\n";
print $TMP 'sub start  {my $self = shift;$self->SUPER::start();}' . "\n";
print $TMP 'sub after  {local ($self, @VALUE) = @_; if ($self->{after} ) {&{$self->{after}}($self, @VALUE)};}' . "\n";
print $TMP '# Up to here Xcrypt\'s header.  From here your script.' . "\n";
print $TMP 'unless ($xcropt::options{scratch}) { &jobsched::read_log(); }' . "\n";
print $TMP '&jobsched::invoke_abort_check();' . "\n";
print $TMP '&jobsched::invoke_left_message_check();' . "\n";
#print $TMP '&jobsched::invoke_watch();' . "\n";
print $TMP '$builtin::env_d = &add_host({"host" => $xcropt::options{host}, "wd" => $xcropt::options{wd}}, "sched" => $xcropt::options{sched}, "xd" => $xcropt::options{xd}, "p5l" => $xcropt::options{p5l});' . "\n";
foreach (<$USER>) { print $TMP "$_"; }
print $TMP '# Up to here your script.  From here Xcrypt\'s footer.' . "\n";
close($TMP);
close($USER);

#system("perl -m$header $xcrplfile " . join(' ', @ARGV)) or die $!;

#my $exitcode = system("perl $xcrplfile " . join(' ', @ARGV));
#unless ($exitcode == 0) { die "Can't perl $xcrplfile\n"; }
