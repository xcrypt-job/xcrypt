#!/usr/bin/env perl
# This file is obsoleted.

#use strict;
use File::Spec;
use Tk;
use Tk::TList;
use Tk::ItemStyle;
use common;

my $mainwindow = MainWindow->new( -title => 'Xcrypt' );
$mainwindow->geometry( '1000x1000' );

#my @fontlist = sort $mainwindow->fontFamilies;
my @fontlist = ('Helvetica');
my $menufontsize = 12;
my $fontsize = 14;

$mainwindow->optionAdd( '*Menu.font' => [$fontlist[0], $menufontsize, 'bold'] );
foreach ('*Button.font', '*Label.font') {
    $mainwindow->optionAdd( "$_" => [$fontlist[0], $fontsize, 'bold'] );
}

our ($eof0, $eof2);

my $black = $mainwindow->ItemStyle('text',
				   -padx => 10,
				   -font => [$fontlist[0], $fontsize, 'bold'] );
my $red   = $mainwindow->ItemStyle('text',
				   -padx => 10,
				   -foreground => 'red',
				   -font => [$fontlist[0], $fontsize, 'bold'] );
my $green = $mainwindow->ItemStyle('text',
				   -padx => 10,
				   -foreground => 'green',
				   -font => [$fontlist[0], $fontsize, 'bold'] );
my $toplevel2;
my $toplevel3;
my $tiler0;

my @buttonnames = ('Xcrypt...', 'Xcryptstat', 'Xcryptdel...');
my @labelnames = ('Main', 'Status', 'Aborted');
my $max = 2;
my $height = 0.15 / (1+$max);
my $width = 1 / (1+$max);
my $statcount;

my $inventorydir = 'inv_watch';

sub connect {
    my ($widget, $pipe, $eof) = @_;

    my($stat, $data);
    $stat = sysread $pipe, $data, 4096;
    die "sysread error:  $!" unless defined $stat;
    if ($data =~ / aborted$/) {
	$text2->insert('end', $data);
    }
    ${$widget}->insert('end', $data);
    ${$widget}->yview('end');

    if ($stat == 0) { ${$eof} = 1; }
}

sub del {
    $eof2 = 0;
    open( PIPE2, "xcryptdel $_[0] |" ) or warn "Can't delete $_[0]";
    $mainwindow->fileevent( \*PIPE2, 'readable',
			    [\&connect, 'text2', 'PIPE2', 'eof2'] );
    $mainwindow->waitVariable(\$eof2);
    $mainwindow->fileevent( \*PIPE2, 'readable' => '' );
    close PIPE2;
    $buffer2 = "xcryptdel $_[0]";
}

my $menu = $mainwindow->Menu();
$menu->optionAdd( '*Menu.font' => [$fontlist[0], $menufontsize, 'bold'] );

$mainwindow->configure( -menu => $menu );
$menu->add( 'cascade', -label => 'File' );
$menu->add( 'cascade', -label => 'View' );
$menu->add( 'cascade', -label => 'Tool' );
$menu->add( 'cascade', -label => 'Help' );

my $file = $menu->Menu();
$menu->entryconfigure( 'File', -menu => $file );

foreach (0..$max) {
    my $button = $mainwindow->Button();
    $button->configure( -text => $buttonnames[$_], -command => [\&fun, $_] );
    $button->place( -relx => 0,              -relwidth  => 0.2,
		    -rely => ($_ * $height), -relheight => $height );
    $file->add( 'command', -label => "$buttonnames[$_]", -command => [\&fun, $_] );

    my $frame = $mainwindow->Frame();
    $frame->place( -relx => ($_ * $width), -relwidth  => $width,
		   -rely => 0.15,          -relheight => 0.85    );

    my $buffername = 'buffer' . $_;
    eval "our \$$buffername = \'\';";

    my $labelname = 'label' . $_ ;
    eval "our \$$labelname = \$mainwindow->Label();";
    ${$labelname}->configure( -textvariable => \$$buffername );
    ${$labelname}->place( -relx => 0.2,            -relwidth  => 0.8,
			  -rely => ($_ * $height), -relheight => $height );

    my $sublabel = 'sublabel' . $_;
    eval "our \$$sublabel = \$frame->Label();";
    ${$sublabel}->configure( -text => "$labelnames[$_]" );
    ${$sublabel}->pack( -fill => 'both' );

    my $text = 'text' . $_;
    eval "our \$$text = \$frame->Scrolled( \'Text\' );";
    ${$text}->configure( -font => [$fontlist[0], $fontsize, 'normal'],
			-background => 'white',
			-scrollbars => 'se',
			-wrap => 'none' );
    ${$text}->pack( -fill => 'both', -expand => 'true' );
}

$file->add( 'separator' );
$file->add( 'command', -label => 'Exit', -command => \&exit );

sub fun {
    if ($_[0] == 0) {
	my $filename = $mainwindow->getOpenFile(
	    -font => [$fontlist[0], $fontsize, 'normal'],
	    -filetypes => [['Xcrypt Files', ['.xcr']],
			   ['All Files', ['*']]]);
	unless ($filename eq '') {
	    $buffer0 = "xcrypt $filename";
	    $eof0 = 0;
	    open( PIPE0, "xcrypt $filename|" ) or warn "Can't execute $filename";
	    $mainwindow->fileevent( \*PIPE0, 'readable',
				    [\&connect, 'text0', 'PIPE0', 'eof0'] );
	    $mainwindow->waitVariable(\$eof0);
	    $mainwindow->fileevent( \*PIPE0, 'readable' => '' );
	    close PIPE0;
	}
    } elsif ($_[0] == 1) {
	$statcount = $statcount + 1;
	$buffer1 = "xcryptstat executed ($statcount times)";
	open( PIPE1, "xcryptstat|" );
	while (<PIPE1>) {
	    $text1->insert('end', $_);
	    $text1->yview('end');
	}
    } elsif ($_[0] == 2) {
	unless ( Exists( $toplevel2 ) ) {
	    $toplevel2 = $mainwindow->Toplevel( -title => 'Xcryptdel' );
	    my $listbox = $toplevel2->Scrolled( 'Listbox',
						-scrollbars => 'se',
						-font => [$fontlist[0],
							  $fontsize, 'bold'] );
	    $listbox->pack( -side => 'left' );

	    my $button0 = $toplevel2->Button( -text => 'OK',
					      -command => [\&del2, $listbox] );
	    $button0->pack( -fill => 'x' );

	    my $button1 = $toplevel2->Button( -text => 'Cancel',
					      -command => ['destroy', $toplevel2] );
	    $button1->pack( -fill => 'x' );

	    my @job_ids = &jobsched::get_all_job_ids();
	    foreach (@job_ids) {
		$listbox->insert('end', $_);
		$listbox->yview('end');
	    }
	}
    } else {}
}

my $view = $menu->Menu();
$menu->entryconfigure( 'View', -menu => $view );
$view->add( 'cascade', -label => 'Size' );
my $size = $view->Menu();
$view->entryconfigure( 'Size', -menu => $size );
foreach (8..24) {
    $size->add( 'command', -label => $_, -command => [\&sizechange, $_] );
}

sub sizechange {
    $fontsize = $_[0];
    my @bold = ('label0', 'label1', 'label2',
#		'button0', 'button1', 'button2',
		'sublabel0', 'sublabel1', 'sublabel2');
    foreach (@bold) {
	${$_}->configure( -font => [$fontlist[0], $fontsize, 'bold']);
    }
    my @normal = ('text0', 'text1', 'text2');
    foreach (@normal) {
	${$_}->configure( -font => [$fontlist[0], $fontsize, 'normal']);
    }
}

my $tool = $menu->Menu();
$menu->entryconfigure( 'Tool', -menu => $tool );
$tool->add( 'command', -label => 'Clean',
	    -command => sub { system( "xcrypt -- clean" ); } );
$tool->add( 'command', -label => 'Monitor', -command => [\&monitor, 0] );
$tool->add( 'command', -label => 'Monitor & Delete', -command => [\&monitor, 1] );

sub monitoring {
    my @job_ids = &jobsched::get_all_job_ids();

    my %jobcolors = ( 'done'      => $green,
		      'finished'  => $green,
		      'aborted'   => $red,
		      'active'    => $black,
		      'prepared'  => $black,
		      'submitted' => $black,
		      'queued'    => $black,
		      'running'   => $black
	);

    my $lt = @job_ids;
    if ($lt > 0) {
	$tiler0->delete(0, $lt-1);
    }
    foreach (@job_ids) {
	my $inv = File::Spec->catfile ("$inventorydir", "$_");
	open( JOB, "< $inv" );
	while( $line = <JOB> ){
	    if ($line =~ /^status\:\s*(.+)/) {
		$status = $1;
	    }
	}
	close( JOB );

	$tiler0->insert( 'end', -itemtype => 'text', -state => 'normal',
			 -text => $_, -style => $jobcolors{$status} );
    }
    unless ($_[0]) {
	$toplevel3->after(3, [\&monitoring, 0]);
    }
}

sub monitor {
#    unless ( Exists( $toplevel3 ) ) {
	$toplevel3 = $mainwindow->Toplevel( -title => 'Monitor' );
	$toplevel3->geometry( '600x600' );

	$tiler0 = $toplevel3->Scrolled( 'TList',
					-font => [$fontlist[0], $fontsize, 'bold'],
					-background => 'white',
					-scrollbars => 'e',
					-orient => 'horizontal' )
	    ->pack( -expand => 'yes', -fill => 'both', -side => 'left' );

	if ($_[0]) {
	    my $bn0_m = $toplevel3
		->Button( -text => 'Reload', -command => [\&monitoring, 0] )
		->pack( -fill => 'x' );
	    my $bn2_m = $toplevel3
		->Button( -text => 'Delete', -command => [\&del3, $tiler0] )
		->pack( -fill => 'x' );
	}
	my $bn1_m = $toplevel3
	    ->Button( -text => 'Close',	-command => ['destroy', $toplevel3] )
	    ->pack( -fill => 'x' );

	&monitoring($_[0]);
#    }
}

sub del2 {
    my @index = $_[0]->curselection();
    unless (@index eq ()) {
	my $job = $_[0]->get($index[0]);
	&del($job);
	$toplevel2->destroy();
    }
}

sub del3 {
    my @job_ids = &jobsched::get_all_job_ids();
    my @index = $_[0]->infoSelection();
    my $job = $job_ids[$index[0]];
    &del($job);
}

my $help = $menu->Menu();
$menu->entryconfigure( 'Help', -menu => $help );
$help->add( 'command', -label => 'Manual...',
	    -command => sub {
		system( "acroread $ENV{XCRYPT}/doc/Xcrypt_manual.pdf" );
	    } );

if ( Exists( $toplevel3 ) ) { &monitoring(); }

MainLoop();
