#!/usr/bin/env perl
package xcrypt;

use strict;
use Cwd;
use File::Copy;
use File::Temp qw/tempfile/;
use File::Basename;
use Getopt::Long qw(:config pass_through);
use Data::Dumper;
use File::Spec;
use lib (File::Spec->catfile($ENV{XCRYPT}, 'lib'));
use lib (File::Spec->catfile($ENV{XCRYPT}, 'lib', 'cpan'));
use lib (File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib'));
use Config::Simple;

my @verboses = ();
push(@verboses, []);                                                                                                                  # verbose_level0
push(@verboses, ['verbose_transition', 'verbose_abort'          ]);                                                                   # verbose_level1
push(@verboses, ['verbose_sync'      , 'verbose_readlog'        , 'verbose_laststat', 'verbose_leftmessage', 'verbose_abortcheck']);  # verbose_level2
push(@verboses, ['verbose_periodic'  , 'verbose_hosts'          ]);                                                                   # verbose_level3
push(@verboses, ['verbose_coro'      , 'verbose_leftmessage_all']);                                                                   # verbose_level4

my @help = (
'Usage: xcrypt <options> file.xcr',
'Options:',
'--help              Show this message and exit',
'--[no]jobinfo       Print job information when prepare()ing the job (default: no)',
'--compile_only      Compile the Xcrypt script into Perl script and exit without executing it',
'--xbs-auto          Use XBS (http://www.il.is.s.u-tokyo.ac.jp/~yamamoto/xbs/) internally for generating job scripts (of an inferred type)',
'--xbs-type=<type>   Use XBS (http://www.il.is.s.u-tokyo.ac.jp/~yamamoto/xbs/) internally for generating job scripts of the XBS\'s type',
'--shared            Block the passage of files between local and remote sites in remote-execution mode',
'--scratch           Not read execution log file even if it exists. Execute all the jobs from the beginning',
'--config=<path>     Specify configulation file (default: ~/.xcryptrc or INSTALLDIR/etc/xcryptrc)',
'--host=<hostname>   Do remote execution on hostname',
'--wd=<directory>    Working directory on remote host (remote execution only)',
'--xd=<directory>    Xcrypt installation directory on remote host (remote execution only)',
'--sched=<scheduler> Specify (overwrite) a default batch scheduler',
'--node=<num>        Specify (overwrite) a default number of nodes that a job acquires',
'--queue=<name>      Specify (overwrite) a default queue jobs to be submitted',
'--abort_check_interval=<num>        Interval time for checking whether submitted jobs are aborted [sec] (default: 19)',
'--left_message_check_interval=<num> Interval time for checking message files from jobs [sec] (default: 3)',
'--[no]done_after_queue              When specified, a job does not become done while it remains in a job queue',
'--inventory_path=<directory>        Directory to save log files (default: ./inv_watch/)', 
'--[no]delete_left_message_file      Delete message files *_is_[running|done] automatically when a job finishes (default: yes)',
'--[no]delete_job_script             Delete a job script automatically when a job finishes (default: no)',
'--[no]delete_in_job_file            Delete a perl script script for executing in a job *_[before|exe|after]_in_job.pl automatically when the job finishes (default: no)',
'--[no]delete_return_file            Delete a job\'s return value file *_return automatically when the job finishes (default: no)',
'--[no]delete_stdout                 Delete a job\'s standard output file *_stdout automatically when the job finishes (default: no)',
'--[no]delete_stderr                 Delete a job\'s standard error file *_stderr automatically when the job finishes (default: no)',
'--verbose=[0|1|2|3|4]               Set verbosity level (default: 1)',
'Verbose options:',
'Validated when verbosity level >= 1',
'--[no]verbose_abort       Display message when a job is aborted',
'--[no]verbose_transition  Display jobs\' state transitions',
'Validated when verbosity level >= 2',
'--[no]verbose_abortcheck  Display message when Xcrypt starts checking whether submitted jobs are aborted',
'--[no]verbose_laststat    Display the jobs\' last statuses when reading a log file',
'--[no]verbose_leftmessage Display message when Xcrypt starts checking message files from jobs',
'--[no]verbose_readlog     Display message when Xcrypt starts and finishes reading an execution log file',
'--[no]verbose_sync        Display message when starting and finishing sync()ing jobs',
'Validated when verbosity level >= 3',
'--[no]verbose_hosts       Display host information when add_host() is called',
'--[no]verbose_periodic    Display message when a user defined timer function is called',
'Validated when verbosity level >= 4',
'--[no]verbose_leftmessage_all Display message when checking a message file from a job for each file',
'--[no]verbose_coro        Display message when entering/leaving Coro threads (for debugging)',
	    );

our %options = (
    'abort_check_interval' => 19, # abortになったジョブをチェックする間隔(sec)
    'left_message_check_interval' => 3, # ジョブスクリプトが残したメッセージをチェックする間隔(sec)
    'inventory_path' => 'inv_watch',
    'delete_left_message_file' => 1, # delete *_is_done/running after read
    'delete_in_job_file' => 1,  # delete *_before/after/exe_in_job.pl after a job finished
    'delete_return_file' => 0,   # delete *_return after a job finished
    'delete_job_script' => 0,    # delete a job script after a job finished
    'delete_stdout' => 0,        # delete a stdout file after a job finished
    'delete_stderr' => 0,        # delete a stderr file after a job finished
    'verbose' => 1,              # verbose level
    'stack_size' => 32768,       # Perlスレッドのスタックサイズ
    # define other default values...
    );

GetOptions
    (\%options,
     'help',
     'jobinfo!',
     'compile_only',
     'xbs-auto',
     'xbs-type=s',
     'shared',
     'scratch',
     'config=s',
     #
     'host=s',
     'wd=s',
     'xd=s',
     'sched=s',
     # 使用頻度が高そうなので特別扱い
     'node=i',
     'queue=s',
     #
     'abort_check_interval=i',
     'left_message_check_interval=i',
     'inventory_path=s',
     'delete_left_message_file!',
     'delete_job_script!',
     'delete_in_job_file!',
     'delete_return_file!',
     'delete_stdout!',
     'delete_stderr!',
     'done_after_queue!',
     'verbose=i',
     'verbose_abort!', 'verbose_transition!',
     'verbose_abortcheck!', 'verbose_laststat!', 'verbose_leftmessage!', 'verbose_readlog!', 'verbose_sync!',
     'verbose_hosts!', 'verbose_periodic!',
     'verbose_coro!', 'verbose_leftmessage_all!',
     'stack_size=i',
     # internal use only
     'lang=s',
     # define other command-line options...
    );

# Print help message
if ($options{help}) {
    foreach (@help) {
        print $_ . "\n";
    }
    exit;
}

if (defined $ENV{XCRJOBSCHED}) { warn 'The environment variable $XCRJOBSCHED is obsolete.  Use ~/.xcryptrc'; }
if (defined $ENV{XCRQUEUE}) { warn 'The environment variable $XCRQUEUE is obsolete.  Use ~/.xcryptrc'; }

my $added_path = File::Spec->catfile($ENV{XCRYPT}, 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib') . ':'
    . File::Spec->catfile($ENV{XCRYPT}, 'lib', 'cpan') . ':'
    . File::Spec->catfile($options{inventory_path});
if (defined $ENV{PERL5LIB}) {
    $ENV{PERL5LIB} = $ENV{PERL5LIB} . ':' . $added_path;
} else {
    $ENV{PERL5LIB} = $added_path;
}

if (defined $options{'xbs-auto'}) { $options{'xbs-type'} = $options{sched}; }
if (defined $options{'xbs-type'}) { $options{sched} = 'XBS'; }

unless (defined $options{config}) {
    foreach my $cfg_file ($ENV{XCRYPTRC},
                          File::Spec->catfile($ENV{HOME}, '.xcryptrc'),
                          File::Spec->catfile($ENV{XCRYPT}, 'etc', 'xcryptrc')) {
        if (-e $cfg_file) {
            $options{config} = $cfg_file;
            last;
        }
    }
}
my $cfg_obj = new Config::Simple($options{config});
my %cfg = $cfg_obj->vars();
foreach my $key (keys %cfg) {
    my @for_getting_real_key = split(/\./, $key);
    if ($for_getting_real_key[0] eq 'environment') {
	my $real_key = $for_getting_real_key[1];
	unless (defined $options{"$real_key"}) {
	    $options{"$real_key"} = $cfg{"$key"};
	}
    }
}
if ( $options{verbose} >= 2 ) {
    print "Loading $options{config}.\n";
}
for (my $i=0; $i <= $#verboses; $i++) {
    if ( $options{verbose} >= $i ) {
        foreach my $key (@{$verboses[$i]}) {
	    unless  (defined $options{$key}) {
		$options{$key} = 1;
	    }
        }
    }
}
my $host = qx/hostname/;
chomp $host;
my $username = qx/whoami/;
chomp $username;
unless (defined $options{host}) { $options{host} = $username . '@' . $host; }
my $wd = Cwd::getcwd();
unless (defined $options{wd}) { $options{wd} = $wd; }
unless (defined $options{xd}) { $options{xd} = $ENV{XCRYPT}; }
unless (defined $options{sched}) { $options{sched} = 'sh'; }
unless (-e File::Spec->catfile($ENV{XCRYPT}, 'lib', 'config', $options{sched}.".pm")) { die "No config file for $options{sched} ($options{sched}.pm)"; }

my $xcrfile;
my @argv;
foreach my $i (@ARGV) {
    if ($i =~ /\.xcr\Z/) { $xcrfile = $i;
    } elsif ($i eq '--') {
    } else { push(@argv, $i); }
}
@ARGV = @argv;
#if (File::Spec->catfile(basename($xcrfile)) !~ /\.xcr\Z/) {
if ($xcrfile !~ /\.xcr\Z/) {
    die "The file extension should be .xcr\n";
}

mkdir $options{inventory_path}, 0755;
my($HEADER, $tmp_filename) = tempfile( 'tempXXXXX', DIR => "$options{inventory_path}", SUFFIX => '.pm' );
#my($HEADER, $tmp_filename) = tempfile( 'tempXXXXX', SUFFIX => '.pm' );
print $HEADER 'package xcropt;' . "\n";
my $dumper = Data::Dumper->Dump([\%options],['options_tmp']);
print $HEADER 'my ' . $dumper . "\n";
print $HEADER 'our %options = %$options_tmp;' . "\n";
print $HEADER '1;' . "\n";
close($HEADER);
until (-e $tmp_filename) {
    sleep 1;
    print "a header file is being generated, please wait...\n";
}
open(my $USER, "<", $xcrfile) or die "Can't open $xcrfile\n";
my $header = basename($tmp_filename, '.pm');
my $TMP;
if (defined $options{compile_only}) {
    open($TMP , ">", $xcrfile . '.pl') or die $!;
} else {
    open($TMP , "| perl -m$header - " . join(' ', @ARGV)) or die $!;
}
print $TMP <<'EOH';
package user;
use File::Spec;
use lib (File::Spec->catfile($ENV{XCRYPT}, 'lib'));
use lib (File::Spec->catfile($ENV{XCRYPT}, 'lib', 'cpan'));
use lib (File::Spec->catfile($ENV{XCRYPT}, 'lib', 'algo', 'lib'));
use builtin;
use Coro;
use jobsched;
use data_generator;
use data_extractor;
#use Net::SCP;
#use Net::SSH;
our @VALUE = ();
our %TEMPLATE;
&set_TEMPLATE();
sub initially {local ($self, @VALUE) = @_; if ($self->{initially}) {&{$self->{initially}}($self, @VALUE)};}
sub before_in_xcrypt {local ($self, @VALUE) = @_; if ($self->{before_in_xcrypt}) {&{$self->{before_in_xcrypt}}($self, @VALUE)};}
sub before {local ($self, @VALUE) = @_; if ($self->{before}) {&{$self->{before}}($self, @VALUE)};}
sub start  {my $self = shift;$self->SUPER::start();}
sub after  {local ($self, @VALUE) = @_; if ($self->{after} ) {&{$self->{after}}($self, @VALUE)};}
sub after_in_xcrypt  {local ($self, @VALUE) = @_; if ($self->{after_in_xcrypt} ) {&{$self->{after_in_xcrypt}}($self, @VALUE)};}
sub finally {local ($self, @VALUE) = @_; if ($self->{finally}) {&{$self->{finally}}($self, @VALUE)};}
$SIG{HUP} =  sub {(bless{},"user")->EVERY::sighup_handler(); print "Xcrypt is aborted by SIGHUP.\n"; exit(1);};
$SIG{INT} =  sub {(bless{},"user")->EVERY::sigint_handler(); print "Xcrypt is aborted by SIGINT.\n"; exit(1);};
$SIG{ABRT} = sub {(bless{},"user")->EVERY::sigabrt_handler(); print "Xcrypt is aborted by SIGABRT.\n"; exit(1);};
$SIG{TERM} = sub {(bless{},"user")->EVERY::sigterm_handler(); print "Xcrypt is aborted by SIGTERM.\n"; exit(1);};
unless ($xcropt::options{scratch}) { &jobsched::read_log(); }
&jobsched::invoke_status_check();
$builtin::env_d = &add_host({"host" => $xcropt::options{host}, "wd" => $xcropt::options{wd}, "sched" => $xcropt::options{sched}, "xd" => $xcropt::options{xd}});
EOH
foreach (<$USER>) { print $TMP "$_"; }
close($TMP);
close($USER);

#my $exitcode = system("perl -m$header[0] $xcrfile.pl " . join(' ', @ARGV));
#unless ($exitcode == 0) { die "Can't perl $xcrfile.pl\n"; }

#unlink $tmp_filename;
