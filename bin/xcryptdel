#!/usr/bin/env perl
package xcryptdel;

use strict;
use Cwd;
use File::Basename;
use File::Spec;
use Getopt::Long;
use IO::Socket;
use Time::HiRes;
use xcrypt_comm;
use common;

my %Opts;
my $tmp = qx/hostname/;
chomp($tmp);
$Opts{host} = $tmp;
$Opts{port} = 0;
if ( -e '_invwrite.log' ) {
    $Opts{logfile} = '_invwrite.log';
}
$Opts{inventory_path} = 'inv_watch';  # be the same to xcropt.pm
GetOptions( \%Opts, 'all', 'host=s', 'port=i', 'logfile=s', 'inventory_path=s', 'timeout=i');
my $Inventory_Path = $Opts{inventory_path};
my $Lockdir = File::Spec->catfile($Inventory_Path, 'inventory_lock'); # be the same to jobsched.pm
my $Sendfile = File::Spec->catfile($Inventory_Path, 'inventory_req'); # be the same to jobsched.pm
my $Ackfile = File::Spec->catfile($Inventory_Path, 'inventory_ack');  # be the same to jobsched.pm

my @Comm_Start_Args
    = ($Opts{port} > 0)
    ? ('sock', $Opts{host}, $Opts{port}, $Opts{timeout})
    : ('file', $Lockdir, $Sendfile, $Ackfile, $Opts{timeout});

if ( $Opts{logfile} ) {
    xcrypt_comm_log_start ($Opts{logfile}, "xcryptdel: ");
}
     
my $retry = 1;
my $trial_limit = 10;
while ($retry) {
    my $handler;
    if ( $Opts{port} > 0 ) {
        $handler = xcrypt_comm_start ('sock', $Opts{host}, $Opts{port}, $Opts{timeout});
    } else {
        unless ( -d $Inventory_Path ) {
            die "$Inventory_Path not exists (be sure to run xcryptdel in the directory where xcrypt is executed)";
        }
        $handler = xcrypt_comm_start ('file', $Lockdir, $Sendfile, $Ackfile, $Opts{timeout});
    }
    ###
    my $ackline;
    if ( $Opts{all} ) {
        $ackline = xcrypt_comm_send ($handler, ":delall\n", 1);
    } else {
        my $str = '';
        foreach my $jobname (@ARGV) {
            $str .= ":del $jobname\n";
        }
        $ackline = xcrypt_comm_send ($handler, $str, 1);
    }
    ###
    xcrypt_comm_finish ($handler);
    if ( $ackline =~ /^:ack/ ) {
        $retry = 0;
    } else {
        die "Unexpected ack message: $ackline";
    }
}
xcrypt_comm_log_finish ();

#exit 0;
