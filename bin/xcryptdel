#!/usr/bin/env perl
package xcryptdel;

use strict;
use Cwd;
use File::Basename;
use File::Spec;
use Getopt::Long;
use IO::Socket;
use Time::HiRes;
use common;

my %opts;
$opts{host} = 'localhost';
#$opts{host} = '127.0.1.1';
$opts{port} =  9999;
GetOptions( \%opts, 'all', 'host=s', 'port=i', 'logfile=s');

my $host = $opts{host};
my $port = $opts{port};
my $log = undef;
if ( $opts{logfile} ) {
    open ($log, ">> $opts{logfile}");
    select($log); $|=1; select(STDOUT);
}

my $retry = 1;
my $trial_limit = 10;
while ($retry) {
    my $socket = 0;
    my $n_trial = 1;
    until ($socket) {
        if ( $n_trial > $trial_limit ) {
            die "Failed to connect $host:$port. $!\n";
        }
        $n_trial++;
        $socket = IO::Socket::INET->new (PeerAddr => $host,
                                         PeerPort => $port,
                                         Proto => 'tcp',
	    );
        unless ($socket) {
            my $slp = 0.1+rand(1.0);
            print STDERR "Failed to connect $host:$port. Retry after $slp seconds.\n";
            Time::HiRes::sleep $slp;
        }
    }
    select($socket); $|=1; select(STDOUT);
    ###
    if ( $opts{all} ) {
        print $socket ":delall\n";
    } else {
        foreach my $jobname (@ARGV) {
            print $socket ":del $jobname\n";
        }
    }
    print $socket ":end\n";

    if ($log) { print $log "xcryptdel: waiting ack\n"; }
    my $ackline =  <$socket>;
    chomp $ackline;
    if ( $ackline =~ /^:ack/ ) {
        $retry = 0;
    } elsif ( $ackline =~ /^:failed/ ) {
        my $slp = 0.1+rand(1.0);
        Time::HiRes::sleep $slp;
    } else {
        die "Unexpected ack message: $ackline";
    }
    if ($log) { print $log "xcryptdel: received $ackline\n"; }
    $socket->close();
}

if ($log) {
    print $log "xcryptdel: successfully done\n";
    close($log);
}

exit 0;
