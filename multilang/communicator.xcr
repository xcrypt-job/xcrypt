package user;
use strict;
use warnings;

use Coro::Socket;
use Coro::Channel;              # also in coro.pm
use Switch;

use JSON;
use NEXT;

# for debug
use Log::Handler;
use Data::Dumper;
use Carp;

use FindBin qw($Bin);
use lib $Bin;

$|=1;

require "communicator.pm";

local $Data::Dumper::Indent = 1;
local $Data::Dumper::Purity = 1;
local $Data::Dumper::Terse = 1;         # dont display 'Var'

#my $debug = $ENV{XCRYPT_DEBUG};
my $debug = 1;
my $test = $ENV{XCRYPT_TEST};          # 新機能

close STDOUT;
close STDERR;
open(STDOUT, ">", "log-communicator.o");
open(STDERR, ">", "log-communicator.e");

my $log = Log::Handler->new(
    screen => {
        log_to => 'STDERR',
        maxlevel => 'debug',
        timeformat => '%H:%M:%S',
        message_layout => "%L,\t[%T] %s(%l):\t%m",
    });

my %functions;

sub check_lang {
    # 引数がサポート言語に含まれるか判定するだけの簡単な関数
    my $check_str = shift;
    unless ($check_str) {
        finish("check_str is undef");
    }

    for my $la (keys %$Comm::sockets) {
        return if($la eq $check_str);
    }
#    croak "Error no match <$check_str> -- check_lang";
    finish("no match <$check_str> -- check_lang");
}

sub check_connection {
    # ライブラリで使われている言語で、$Comm::socketsが初期化されていなければ
    # $Comm::sockets->{lang}->{lib}をロードする多言語プロセスを起動

    $log->debug("start -- check_connection");
    $log->dump(["Comm::langs_in_libs", @Comm::langs_in_libs]);

    for my $lang (@Comm::langs_in_libs) {
        unless ($Comm::sockets->{$lang}->{socket}) {
            $log->debug("<$lang> client launching...");

            # 1. asyncでstart_server(waits)
            my $th = async { start_server($lang) };
            sleep 3;
            my $libs = join(' ', @{$Comm::sockets->{$lang}->{libs}});
            $log->debug("libs: $libs");

            # 2. asyncでruby起動、接続させる。libsを引数にくっつける
            defined(my $pid = fork) or die "Cannot fork: $!";
            unless ($pid) {
                # child
                warn "i am child, libs: $libs";
                $log->debug("i am child, libs: $libs");
                exec("$Comm::sockets->{$lang}->{bin} $libs");
                exit;
            }

            $log->debug("I'm parent. child:$pid");
            $Comm::sockets->{$lang}->{pid} = $pid;

            $th->join;

            # 3. asyncでdispatch起動、$Comm::socketsを更新
            $log->debug("launch dispatch");
            $th = async { dispatch($lang) };
            $log->debug("store dispatch");
            $Comm::sockets->{$lang}->{dispatch} = $th;
        }
    }
}

sub start_server {
    my $lang = shift;
    $log->debug("start -- start_server; lang=$lang");

    my $port = $Comm::sockets->{$lang}->{port};

    my $server = Coro::Socket->new(
        LocalPort => $port,
        Listen    => 2,
        ReuseAddr => 1          # deprecated
    );

    $log->info("waiting <$lang> for port $port");
    $log->dump($server);

    $Comm::sockets->{$lang}->{socket} = $server->accept();

    $log->info("client connected");
}

# ================================================================
sub before_to_json {
    # Receive a ref, then substitute CODE to special hash recursively.

    my ($args) = @_;
    if (ref $args eq 'CODE') {
        my $id = "$args";
        $functions{$id} = $args;
        return {type=>"function/pl", id=>"$id"};
    } elsif (ref $args eq 'ARRAY') {
        return [map { before_to_json($_) } @$args];
    } elsif (ref $args eq 'HASH') {
        my $newhash = {};
        for my $k (keys %$args) {
            $newhash->{$k} = before_to_json($args->{$k});
        }
        return $newhash;
    } elsif (ref $args eq 'user') {
        return {type=>"job_obj", id=>($args->{id})};
    } elsif (ref $args) {
        $log->debug("before_to_json");
        $log->dump($args);
        return "$args";
    } else {
        return $args;
    }
}

sub retrieve {
    # ruby function/object => perl function/object
    # perl function/object => retrieve from hash table
    my ($lang, $args) = @_;

    if (ref $args eq 'HASH') {
        if (defined $args->{type}) {
            if ($args->{type} eq 'function/pl') {
                $log->debug("function/pl");
                $log->dump(\%functions);
                return $functions{$args->{id}};
            } elsif ($args->{type} eq "function/ext") {
                $log->debug("function/ext");
                return sub {
                    my @fnargs = @_;
                    $log->debug("sub: @fnargs");
                    return xcrypt_call($lang, $args->{id}, @fnargs);
                }
            } elsif ($args->{type} eq 'job_obj') {
                $log->debug("retrieve/job_obj");
                return jobsched::find_job_by_id($args->{id});
            } else {
                $log->fatal("Wrong message.");
                return $args;
            }
        } else {
            for my $k (keys %$args) {
                $args->{$k} = retrieve($lang, $args->{$k});
            }
            return $args;
        }
    } elsif (ref $args eq 'ARRAY') {
        my $ret = [ map { retrieve($lang, $_) } @$args];
        return $ret;
    } else {
        return $args;
    }
}

# to_json here
sub xcrypt_send {
    my ($lang, $ref) = @_;
    $log->debug("lang:$lang -- xcrypt_send");
    $log->dump($ref);
    my $bef_json = before_to_json($ref);
    $log->dump($bef_json);
    my $json = JSON->new->convert_blessed->encode($bef_json);
    $log->dump($json);
    my $lock = $Comm::sockets->{$lang}->{lock};

    $lock->down;
#    $log->dump($Comm::sockets->{$lang});
    finish("\$Comm::sockets->{$lang}->socket is undef") unless defined $Comm::sockets->{$lang}->{socket};
    print { $Comm::sockets->{$lang}->{socket} } ($json."\n"); # cf. perldoc#print
    $lock->up;

    $log->debug("end -- xcrypt_send");
}

# for users
sub xcrypt_call {
    my ($lang, $fn, @args) = @_;
    xcrypt_call_with_super($lang, sub{}, $fn, @args);
}

# Send funcall message and waits.
sub xcrypt_call_with_super {
    my ($lang, $super, $fn, @args) = @_;
    $log->debug(" -- xcrypt_call_with_super");
    check_lang($lang);
    check_connection();

    my $message = {
        "thread_id" => "$Coro::current",
        "exec" => "funcall",
        "function" => "$fn",
        "args" => [@args],
        "super" => $super,
    };

    $log->debug("==> xcrypt_call sending...");
    $log->dump($message);

    my $q = $Comm::sockets->{$lang}->{queues}->{"$Coro::current"} = Coro::Channel->new;
    xcrypt_send($lang, $message);
    my $retval = $q->get();
    $log->debug("Got return value -- xcrypt_call " . $retval);

    return $retval;
}

# ================
# dispatch(<lang>)
sub dispatch {
    my $lang = shift;
    $log->debug("lang=$lang -- dispatch");
    my $client = $Comm::sockets->{$lang}->{socket};

    while (1) {
        cede();
        $log->debug(" -- dispatch");
        unless (defined $client) {
            finish("client is undef");
        }

        # add hook for debug
        if (0) {
            Coro::on_enter { $log->debug("dbg: dipatch thread -- enter : nready=". Coro::nready);};
            Coro::on_leave { print "dbg: dispatch thread -- leave : nready=". Coro::nready ."\n";};
        }

        $log->info("waiting...");

        my $line = $client->getline();
        $log->debug("<== got line");
        $log->debug($line);

        my $hash = decode_json($line); # hash ref
        my $message = retrieve($lang, $hash);

        $log->debug("after retrieve");
        $log->dump($message);

        switch ($message->{exec}) {
            case "return" {
                $log->debug("receive return value ".$message->{message}
                            ." to ".$message->{thread_id});
                my $q = $Comm::sockets->{$lang}->{queues}->{$message->{thread_id}};
                $q->put($message->{message});
                cede();           # necessary?
                # cf. id:nayu / 20100109
            }
            case "funcall" {
                async {
                    $log->debug("start perl-funcall thread");

                    my ($fn, $args) = ($message->{function}, $message->{args});
                    die "undefined function" . $fn unless (defined $fn);

                    if (1) {
                        Coro::on_enter { $log->debug("dbg: execute thread -- enter : nready=". Coro::nready);};
                        Coro::on_leave { $log->debug("dbg: execute thread -- leave : nready=". Coro::nready);};
                    }

                    # unless (ref &$fn eq 'CODE') {
                    #     $log->dump($fn);
                    #     finish("fn is not a CODE ref");
                    # }

                    if ($fn =~ /^CODE/ ) {
                        $log->debug("CODE found");
                        my $fn = $functions{$fn}
                            or die "no fn";
                    }

                    warn "fn: $fn";
                    no strict "refs";
                    my @ret = &$fn(@$args);

                    $log->debug("return lang:$lang -- funcall");

                    xcrypt_send( $lang, {
                        "thread_id" => $message->{thread_id},
                        "exec" => "return",
                        "message" => before_to_json([@ret])
                    });

                };
                cede();           #?
            }
            case "call_next" {
                $log->info("call_next");
                my $pack = $message->{package};
                my $func = $message->{function};
                my $args = $message->{args};

                $func = "call_next_$func";

                async {
                    my $ret;
                    no strict "refs";
                    $log->dump([$pack,$func,$args]);
#                    $ret = $pack->$func($args);
                    $ret = user->call_next_new(@$args);
                    warn $ret;
#                    my $ret = 1;
                    $log->dump($ret);

                    if ($@) {           # eval exception trap
                        $log->fatal("error: $@");
                        exit;
                    }

                    $log->dump( $ret );
                    $log->debug($message->{thread_id});

                    xcrypt_send({ # $lang
                        "thread_id" => $message->{thread_id},
                        "exec" => "return",
                        "message" => before_to_json($ret),
                    });
                };
            } #call_next
            case "finish" { finish() }
            case "" { finish("message is undef") }
            else {
                finish("invalid input: $_ -- dispatch");
            }
        }
    } #while
} #dispatch

sub finish {
    # use die!
    my ($message) = @_;
    $log->warn("$message -- finish");
    confess;
}

sub get {
    my ($job_obj, $field) = @_;
    $log->dump(["comm/get", $job_obj, $field, $job_obj->{$field}]);
    return $job_obj->{$field}; # fixme
}

sub set {
    $log->debug("comm/set");
    my ($job_obj, $field, $newvar) = @_;
    $log->dump(["comm/set", $job_obj, $field, $newvar]);
    return $job_obj->{$field} = $newvar; # fixme / setf place??
}

# ================================================================
sub _finish {
    my ($message);
    # Server異常終了
    $log->fatal("$message -- _finish");
    for my $la (keys %$Comm::sockets) {
        if (defined $Comm::sockets->{$la}->{socket}) {
            # finish関数を引数付きで呼ぶ
            xcrypt_call($la, "finish", "Server Dead:" . $message);
            sleep 1;
            close($Comm::sockets->{$la}->{socket});
            $Comm::sockets->{$la}->{dispatch}->cancel;
        }
    }
}

END {
    # 絶対にやらないといけない処理だけ書く
    # （以下を区別できない）
    # 1.無事にここまで来た場合
    # 2.どっかでエラーが出て、dieしたばあい
    close STDOUT;
    close STDERR;
}

MAIN: {
    if ($debug) {
        $log->info("*** debug mode: on***");
    } else {
        $log->info("--- debug mode: off---");
    }

    if (1) {
        Coro::on_enter { print $log->debug("dbg: main thread -- enter : nready=". Coro::nready);};
        Coro::on_leave { print $log->debug("dbg: main thread -- leave : nready=". Coro::nready);};
    }
#    start_server and dispatch;

    my $lang = $xcropt::options{lang};
    if ($lang) {        # 他言語から起動された
        $log->debug("launched by $lang");
        start_server($lang);
        my $th = async { dispatch($lang) };
        $Comm::sockets->{$lang}->{dispatch} = $th;
    } else {
        $log->info("lang is undef (perl script?)");
    }

# このファイルは一番最初にロードされる
# 最初のロード時は空でよい
# その後 use base 時に追加される
# 実際に接続するのは最初のxcrypt_callの時

# warn Dumper ["Comm::langs_in_libs", @Comm::langs_in_libs];
# for my $la (@Comm::langs_in_libs) {
#     $log->debug("launch $la process");
#     start_server($la);
# }

# wait here
    for my $la (keys %$Comm::sockets) {
        if (my $th = $Comm::sockets->{$la}->{dispatch}) {
            $th->join;
        }
    }
}

1;
